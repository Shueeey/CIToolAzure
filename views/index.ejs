<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>SSC Continuous Improvement Dashboard</title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background-color: #ffffff;
      color: #333333;
      overflow-x: hidden;
    }

    .header {
      background-color: #f8f9fa;
      padding: 12px 20px;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .logo-section {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .logo {
      width: 32px;
      height: 32px;
      background: linear-gradient(45deg, #ff6b35 0%, #ff8c42 100%);
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
      font-size: 16px;
    }

    .breadcrumb {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 14px;
      color: #6c757d;
    }

    .board-title {
      font-size: 16px;
      font-weight: 600;
      color: #333333;
    }

    .header-controls {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .search-header {
      position: relative;
    }

    .search-header input {
      background-color: #ffffff;
      border: 1px solid #ced4da;
      border-radius: 6px;
      padding: 8px 12px 8px 35px;
      color: #333333;
      font-size: 14px;
      width: 300px;
    }

    .search-header input::placeholder {
      color: #6c757d;
    }

    .search-header input:focus {
      outline: none;
      border-color: #ff6b35;
      box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.2);
    }

    .search-icon {
      position: absolute;
      left: 10px;
      top: 50%;
      transform: translateY(-50%);
      color: #6c757d;
      font-size: 16px;
    }

    .view-controls {
      display: flex;
      align-items: center;
      gap: 10px;
      font-size: 12px;
      color: #6c757d;
    }

    .total-count {
      color: #6c757d;
      font-size: 14px;
    }

    .debug-info {
      background-color: #f8f9fa;
      border: 1px solid #e9ecef;
      border-radius: 6px;
      padding: 10px;
      margin: 10px 20px;
      font-size: 12px;
      color: #6c757d;
    }

    .container {
      display: flex;
      height: calc(100vh - 60px);
    }

    /* Sidebar */
    .sidebar {
      width: 200px;
      background-color: #f8f9fa;
      border-right: 1px solid #e9ecef;
      padding: 20px 0;
    }

    .nav-menu {
      padding: 0 15px;
    }

    .nav-item {
      display: flex;
      align-items: center;
      padding: 10px 12px;
      color: #6c757d;
      text-decoration: none;
      font-size: 14px;
      border-radius: 6px;
      margin-bottom: 4px;
      transition: all 0.2s;
    }

    .nav-item:hover {
      background-color: #e9ecef;
      color: #333333;
    }

    .nav-item.active {
      background-color: #ff6b35;
      color: white;
    }

    .nav-icon {
      width: 16px;
      height: 16px;
      margin-right: 10px;
    }

    /* Main Content */
    .main-content {
      flex: 1;
      padding: 20px;
      overflow: auto;
      background-color: #ffffff;
    }

    .filters-section {
      display: flex;
      gap: 12px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }

    .filter-select {
      background-color: #ffffff;
      border: 1px solid #ced4da;
      border-radius: 6px;
      padding: 8px 12px;
      color: #333333;
      font-size: 14px;
      min-width: 140px;
    }

    .filter-select:focus {
      outline: none;
      border-color: #ff6b35;
      box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.2);
    }

    /* Board */
    .board-container {
      display: flex;
      gap: 20px;
      overflow-x: auto;
      padding-bottom: 20px;
    }

    .column {
      min-width: 280px;
      background-color: #f8f9fa;
      border-radius: 8px;
      padding: 16px;
      border: 1px solid #e9ecef;
    }

    .column-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 16px;
      padding-bottom: 12px;
      border-bottom: 1px solid #e9ecef;
    }

    .column-title {
      font-size: 14px;
      font-weight: 600;
      color: #333333;
    }

    .column-count {
      background-color: #ff6b35;
      color: white;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: 500;
    }

    .column-content {
      max-height: calc(100vh - 200px);
      overflow-y: auto;
    }

    .card {
      background-color: #ffffff;
      border: 1px solid #e9ecef;
      border-radius: 8px;
      padding: 12px;
      margin-bottom: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
      position: relative;
    }

    .card:hover {
      border-color: #ff6b35;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(255, 107, 53, 0.15);
    }

    .card-id {
      font-size: 12px;
      font-weight: 600;
      color: #6c757d;
      margin-bottom: 6px;
    }

    .card-title {
      font-size: 14px;
      font-weight: 500;
      color: #333333;
      line-height: 1.4;
      margin-bottom: 8px;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .card-description {
      font-size: 12px;
      color: #6c757d;
      line-height: 1.3;
      margin-bottom: 12px;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .card-footer {
      display: flex;
      align-items: center;
      justify-content: space-between;
      font-size: 11px;
    }

    .card-state {
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .state-dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
    }

    .state-dot.normal { background-color: #28a745; }
    .state-dot.blocked { background-color: #dc3545; }
    .state-dot.major { background-color: #ff6b35; }

    .card-domain {
      background-color: #e9ecef;
      color: #333333;
      padding: 2px 6px;
      border-radius: 4px;
      font-size: 10px;
    }

    .priority-indicator {
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 4px;
      border-radius: 4px 0 0 4px;
    }

    .priority-indicator.top5 { background-color: #ff6b35; }
    .priority-indicator.normal { background-color: #28a745; }

    /* Modal */
    .modal {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0,0,0,0.5);
      z-index: 1000;
    }

    .modal-content {
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #ffffff;
      border-radius: 12px;
      width: 90%;
      max-width: 800px;
      max-height: 90vh;
      overflow: hidden;
      border: 1px solid #e9ecef;
      box-shadow: 0 10px 30px rgba(0,0,0,0.3);
    }

    .modal-header {
      padding: 20px 24px;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      align-items: flex-start;
      justify-content: space-between;
      background-color: #f8f9fa;
    }

    .modal-title-section {
      flex: 1;
      margin-right: 20px;
    }

    .modal-id {
      font-size: 14px;
      font-weight: 600;
      color: #6c757d;
      margin-bottom: 8px;
    }

    .modal-title {
      font-size: 20px;
      font-weight: 600;
      color: #333333;
      line-height: 1.3;
      margin-bottom: 12px;
    }

    .modal-meta {
      display: flex;
      gap: 16px;
      font-size: 12px;
      color: #6c757d;
    }

    .close-btn {
      background: none;
      border: none;
      color: #6c757d;
      font-size: 24px;
      cursor: pointer;
      padding: 0;
      width: 32px;
      height: 32px;
      display: flex;
      align-items: center;
      justify-content: center;
      border-radius: 6px;
    }

    .close-btn:hover {
      background-color: #e9ecef;
      color: #333333;
    }

    .modal-body {
      display: flex;
      height: 500px;
    }

    .modal-main {
      flex: 1;
      padding: 24px;
      overflow-y: auto;
      background-color: #ffffff;
    }

    .modal-sidebar {
      width: 300px;
      background-color: #f8f9fa;
      border-left: 1px solid #e9ecef;
      padding: 24px;
      overflow-y: auto;
    }

    .description-section {
      margin-bottom: 24px;
    }

    .description-section h3 {
      font-size: 16px;
      font-weight: 600;
      color: #333333;
      margin-bottom: 12px;
    }

    .description-text {
      font-size: 14px;
      color: #6c757d;
      line-height: 1.5;
      white-space: pre-wrap;
    }

    .activity-section h3 {
      font-size: 16px;
      font-weight: 600;
      color: #333333;
      margin-bottom: 16px;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .activity-item {
      display: flex;
      gap: 12px;
      margin-bottom: 16px;
    }

    .activity-avatar {
      width: 32px;
      height: 32px;
      border-radius: 50%;
      background: linear-gradient(45deg, #ff6b35 0%, #ff8c42 100%);
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 12px;
      font-weight: 600;
      flex-shrink: 0;
    }

    .activity-content {
      flex: 1;
    }

    .activity-header {
      display: flex;
      align-items: center;
      gap: 8px;
      margin-bottom: 4px;
      font-size: 12px;
    }

    .activity-author {
      font-weight: 600;
      color: #333333;
    }

    .activity-time {
      color: #6c757d;
    }

    .activity-text {
      font-size: 13px;
      color: #6c757d;
      line-height: 1.4;
    }

    .property-section {
      margin-bottom: 24px;
    }

    .property-section h4 {
      font-size: 12px;
      font-weight: 600;
      color: #6c757d;
      text-transform: uppercase;
      letter-spacing: 0.5px;
      margin-bottom: 8px;
    }

    .property-value {
      font-size: 14px;
      color: #333333;
      margin-bottom: 16px;
    }

    .state-badge {
      display: inline-flex;
      align-items: center;
      gap: 6px;
      padding: 4px 8px;
      border-radius: 6px;
      font-size: 12px;
      font-weight: 500;
    }

    .state-badge.new {
      background-color: rgba(40, 167, 69, 0.1);
      color: #28a745;
      border: 1px solid rgba(40, 167, 69, 0.2);
    }

    .state-badge.prioritised {
      background-color: rgba(255, 193, 7, 0.1);
      color: #ffc107;
      border: 1px solid rgba(255, 193, 7, 0.2);
    }

    .state-badge.scoping {
      background-color: rgba(102, 126, 234, 0.1);
      color: #667eea;
      border: 1px solid rgba(102, 126, 234, 0.2);
    }

    .state-badge.in-progress {
      background-color: rgba(255, 107, 53, 0.1);
      color: #ff6b35;
      border: 1px solid rgba(255, 107, 53, 0.2);
    }

    .state-badge.operational {
      background-color: rgba(6, 182, 212, 0.1);
      color: #06b6d4;
      border: 1px solid rgba(6, 182, 212, 0.2);
    }

    .state-badge.completed {
      background-color: rgba(34, 197, 94, 0.1);
      color: #22c55e;
      border: 1px solid rgba(34, 197, 94, 0.2);
    }

    .state-badge.paused {
      background-color: rgba(220, 53, 69, 0.1);
      color: #dc3545;
      border: 1px solid rgba(220, 53, 69, 0.2);
    }

    .state-badge.major {
      background-color: rgba(255, 107, 53, 0.1);
      color: #ff6b35;
      border: 1px solid rgba(255, 107, 53, 0.2);
    }

    .state-badge.normal {
      background-color: rgba(40, 167, 69, 0.1);
      color: #28a745;
      border: 1px solid rgba(40, 167, 69, 0.2);
    }

    .empty-state {
      text-align: center;
      color: #6c757d;
      font-style: italic;
      padding: 40px 20px;
      font-size: 14px;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .sidebar {
        display: none;
      }

      .board-container {
        flex-direction: column;
      }

      .column {
        min-width: auto;
      }

      .header-controls {
        flex-direction: column;
        gap: 10px;
      }

      .search-header input {
        width: 200px;
      }
    }
  </style>
</head>
<body>
<!-- Header -->
<div class="header">
  <div class="logo-section">
    <div class="logo">SSC</div>
    <div class="breadcrumb">
      <span>Agile boards</span>
      <span>/</span>
      <span class="board-title">SSC Continuous Improvement Board</span>
    </div>
  </div>

  <div class="header-controls">
    <div class="search-header">
      <span class="search-icon">🔍</span>
      <input type="text" id="searchInput" placeholder="Filter ideas on the board">
    </div>
    <div class="file-upload">
      <input type="file" id="fileInput" accept=".csv,.xlsx" style="display: none;">
      <button id="uploadBtn" style="background: #ff6b35; color: white; border: none; padding: 8px 12px; border-radius: 6px; cursor: pointer;">
        📁 Load Data
      </button>
    </div>
    <div class="view-controls">
      <span class="total-count" id="totalCount">Loading...</span>
      <button id="refreshBtn" style="background: #28a745; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; margin-left: 10px;">
        🔄 Refresh
      </button>
      <button id="debugBtn" style="background: #6c757d; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; margin-left: 5px;">
        🔍 Debug
      </button>
      <span>📊</span>
    </div>
  </div>
</div>

<!-- Debug Info Panel -->
<div class="debug-info" id="debugInfo" style="display: none;">
  <strong>Debug Information:</strong>
  <div id="debugContent"></div>
</div>

<div class="container">
  <!-- Sidebar -->
  <div class="sidebar">
    <nav class="nav-menu">
      <a href="#" class="nav-item">
        <span class="nav-icon">✓</span>
        Issues
      </a>
      <a href="dashboard.html" class="nav-item">
        <span class="nav-icon">📊</span>
        Dashboards
      </a>
      <a href="#" class="nav-item active">
        <span class="nav-icon">📋</span>
        Agile Boards
      </a>
      <a href="#" class="nav-item">
        <span class="nav-icon">📈</span>
        Reports
      </a>
      <a href="#" class="nav-item">
        <span class="nav-icon">📁</span>
        Projects
      </a>
      <a href="#" class="nav-item">
        <span class="nav-icon">📚</span>
        Knowledge Base
      </a>
    </nav>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <!-- Filters -->
    <div class="filters-section">
      <select class="filter-select" id="domainFilter">
        <option value="">All Domains</option>
      </select>
      <select class="filter-select" id="stateFilter">
        <option value="">All States</option>
      </select>
      <!-- Time Range Filter -->
      <input type="datetime-local" id="startTime" class="filter-select" placeholder="Start Time">
      <input type="datetime-local" id="endTime" class="filter-select" placeholder="End Time">
      <select class="filter-select" id="priorityFilter">
        <option value="">All Priorities</option>
        <option value="true">Top 5 Only</option>
        <option value="false">Regular Priority</option>
      </select>
    </div>

    <!-- Board -->
    <div class="board-container">
      <div class="column">
        <div class="column-header">
          <span class="column-title">New</span>
          <span class="column-count" id="newCount">0</span>
        </div>
        <div class="column-content" id="newColumn"></div>
      </div>

      <div class="column">
        <div class="column-header">
          <span class="column-title">Prioritised</span>
          <span class="column-count" id="prioritisedCount">0</span>
        </div>
        <div class="column-content" id="prioritisedColumn"></div>
      </div>

      <div class="column">
        <div class="column-header">
          <span class="column-title">Scoping</span>
          <span class="column-count" id="scopingCount">0</span>
        </div>
        <div class="column-content" id="scopingColumn"></div>
      </div>

      <div class="column">
        <div class="column-header">
          <span class="column-title">In Progress</span>
          <span class="column-count" id="inProgressCount">0</span>
        </div>
        <div class="column-content" id="inProgressColumn"></div>
      </div>

      <div class="column">
        <div class="column-header">
          <span class="column-title">Operational</span>
          <span class="column-count" id="operationalCount">0</span>
        </div>
        <div class="column-content" id="operationalColumn"></div>
      </div>

      <div class="column">
        <div class="column-header">
          <span class="column-title">Completed</span>
          <span class="column-count" id="completedCount">0</span>
        </div>
        <div class="column-content" id="completedColumn"></div>
      </div>
    </div>
  </div>
</div>

<!-- Modal -->
<div class="modal" id="modal">
  <div class="modal-content">
    <div class="modal-header">
      <div class="modal-title-section">
        <div class="modal-id" id="modalId"></div>
        <h2 class="modal-title" id="modalTitle"></h2>
        <div class="modal-meta" id="modalMeta"></div>
      </div>
      <button class="close-btn" onclick="closeModal()">&times;</button>
    </div>
    <div class="modal-body">
      <div class="modal-main">
        <div class="description-section">
          <h3>Description</h3>
          <div class="description-text" id="modalDescription"></div>
        </div>
        <div class="activity-section">
          <h3>🕒 Activity</h3>
          <div id="modalActivity"></div>
        </div>
      </div>
      <div class="modal-sidebar">
        <div class="property-section">
          <h4>Project</h4>
          <div class="property-value">SSC Continuous Improvement</div>
        </div>
        <div class="property-section">
          <h4>Priority</h4>
          <div class="property-value" id="modalPriority"></div>
        </div>
        <div class="property-section">
          <h4>Submitted By</h4>
          <div class="property-value" id="modalSubmittedBy"></div>
        </div>
        <div class="property-section">
          <h4>Lead Owner</h4>
          <div class="property-value" id="modalLeadOwner"></div>
        </div>
        <div class="property-section">
          <h4>Status</h4>
          <div class="property-value" id="modalStatus"></div>
        </div>
        <div class="property-section">
          <h4>Domain</h4>
          <div class="property-value" id="modalDomain"></div>
        </div>
        <div class="property-section">
          <h4>Progress</h4>
          <div class="property-value" id="modalProgress"></div>
        </div>
        <div class="property-section">
          <h4>Expected Completion</h4>
          <div class="property-value" id="modalExpectedCompletion"></div>
        </div>
        <div class="property-section">
          <h4>Actual Completion</h4>
          <div class="property-value" id="modalActualCompletion"></div>
        </div>
        <div class="property-section">
          <h4>Rating</h4>
          <div class="property-value" id="modalRating"></div>
        </div>
        <div class="property-section">
          <h4>Likes</h4>
          <div class="property-value" id="modalLikes"></div>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/PapaParse/5.3.0/papaparse.min.js"></script>

<script>
  let allData = [];
  let filteredData = [];
  let rawHeaders = [];
  let columnMapping = {};

  // Enhanced column mapping for flexible header detection
  const COLUMN_MAPPINGS = {
    // ID mappings
    id: ['id', 'ID', 'Id', 'idea_id', 'ideaid', 'item_id', 'itemid', 'number', 'no', '#'],

    // Title mappings
    title: ['title', 'Title', 'TITLE', 'name', 'Name', 'summary', 'Summary', 'idea_title', 'idea_name', 'improvement_title'],

    // Description mappings
    description: ['description', 'Description', 'DESCRIPTION', 'detail', 'details', 'Details', 'notes', 'Notes', 'idea_description', 'improvement_description', 'comments'],

    // Status/State mappings
    status: ['status', 'Status', 'STATUS', 'state', 'State', 'STATE', 'stage', 'Stage', 'phase', 'Phase', 'current_status', 'idea_status'],

    // Domain/Category mappings
    domain: ['domain', 'Domain', 'DOMAIN', 'category', 'Category', 'CATEGORY', 'area', 'Area', 'business_area', 'department', 'Department', 'team', 'Team'],

    // Submitter mappings
    submittedBy: ['submitted_by', 'submittedby', 'Submitted by', 'Submitted By', 'SUBMITTED BY', 'submitter', 'Submitter', 'created_by', 'createdby', 'author', 'Author'],

    // Lead owner mappings
    leadOwner: ['lead_owner', 'leadowner', 'Lead Owner', 'Lead owner', 'LEAD OWNER', 'owner', 'Owner', 'assigned_to', 'assignedto', 'responsible', 'Responsible'],

    // Priority mappings
    priority: ['priority', 'Priority', 'PRIORITY', 'top5', 'Top5', 'TOP5', 'is_priority', 'high_priority', 'top_priority'],

    // Progress/Duration mappings
    progress: ['progress', 'Progress', 'PROGRESS', 'duration', 'Duration', 'DURATION', 'percentage', 'Percentage', 'completion', 'Completion', 'percent_complete'],

    // Date mappings
    dateSubmitted: ['date_submitted', 'datesubmitted', 'Date submitted', 'Date Submitted', 'DATE SUBMITTED', 'created_date', 'createddate', 'submission_date', 'date_created'],
    expectedCompletion: ['expected_completion', 'expectedcompletion', 'Expected Completion Date', 'Expected completion', 'expected_date', 'target_date', 'due_date'],
    actualCompletion: ['actual_completion', 'actualcompletion', 'Actual Completion Date', 'Actual completion', 'completed_date', 'finish_date', 'end_date'],

    // Rating mappings
    rating: ['rating', 'Rating', 'RATING', 'score', 'Score', 'SCORE', 'evaluation', 'Evaluation'],

    // Likes mappings
    likes: ['likes', 'Likes', 'LIKES', 'number_of_likes', 'numberof_likes', 'Number of Likes', 'votes', 'Votes', 'thumbs_up']
  };

  // Auto-detect column mappings from headers
  function detectColumnMappings(headers) {
    console.log('🔍 Detecting column mappings from headers:', headers);
    const mapping = {};

    // Clean headers (trim whitespace, handle special characters)
    const cleanHeaders = headers.map(h => h ? h.toString().trim() : '');

    // For each field we need, find the best matching header
    Object.keys(COLUMN_MAPPINGS).forEach(field => {
      const possibleHeaders = COLUMN_MAPPINGS[field];

      // Try exact matches first
      for (const possibleHeader of possibleHeaders) {
        const matchIndex = cleanHeaders.findIndex(h =>
                h.toLowerCase() === possibleHeader.toLowerCase()
        );
        if (matchIndex !== -1) {
          mapping[field] = cleanHeaders[matchIndex];
          console.log(`✅ Exact match: ${field} -> "${cleanHeaders[matchIndex]}"`);
          break;
        }
      }

      // If no exact match, try partial matches
      if (!mapping[field]) {
        for (const possibleHeader of possibleHeaders) {
          const matchIndex = cleanHeaders.findIndex(h =>
                  h.toLowerCase().includes(possibleHeader.toLowerCase()) ||
                  possibleHeader.toLowerCase().includes(h.toLowerCase())
          );
          if (matchIndex !== -1) {
            mapping[field] = cleanHeaders[matchIndex];
            console.log(`🔍 Partial match: ${field} -> "${cleanHeaders[matchIndex]}"`);
            break;
          }
        }
      }
    });

    // Log unmapped headers for debugging
    const mappedHeaders = Object.values(mapping);
    const unmappedHeaders = cleanHeaders.filter(h => h && !mappedHeaders.includes(h));
    if (unmappedHeaders.length > 0) {
      console.log('❓ Unmapped headers:', unmappedHeaders);
    }

    return mapping;
  }


  // Transform database data to match expected format
  function transformDatabaseData(dbData) {
    console.log('🔄 Transforming database data:', dbData.length, 'records');

    return dbData.map((item, index) => {
      const transformed = {};

      // Direct mapping from database columns
      transformed.ID = item.ID || index + 1;
      transformed.Title = item.Title || 'Untitled';
      transformed.Description = item.Idea || item.Description || '';
      transformed.Status = item.State || item.Status || 'New';
      transformed.Domain = item.Team || item.Domain || 'General';
      transformed.SubmittedBy = item.SubmittedBy || 'Unknown';
      transformed.LeadOwner = item.LeadOwner || item.Lead || 'Unassigned';

      // Handle priority/Top5 field
      transformed.Top5 = interpretBooleanValue(item.isTop6 || item.Prioritised_for_Review || false);

      // Handle operational and closed status
      transformed.Operational = interpretBooleanValue(item.Operational);
      transformed.Closed = interpretBooleanValue(item.Closed);

      // Handle dates
      transformed.DateSubmitted = item.Date || item.DateSubmitted;
      transformed.ExpectedCompletion = item.ExpectedCompletion;
      transformed.ActualCompletion = item.Closed_Date || item.ActualCompletion;

      // Handle other fields
      transformed.Notes = item.Notes || '';
      transformed.PowerAppsId = item.PowerAppsId || '';
      transformed.Created_By = item.Created_By || '';
      transformed.Item_Type = item.Item_Type || '';
      transformed.Priority_Level = item.Priority_Level || '';
      transformed.Proposed_Solution = item.Proposed_Solution || '';

      // Add computed fields
      transformed.isComplete = transformed.Closed || (transformed.Status && transformed.Status.toLowerCase().includes('complet'));
      transformed.isInProgress = transformed.Status && transformed.Status.toLowerCase().includes('progress');
      transformed.isTop5 = transformed.Top5;

      // Handle progress/duration (if we add this field later)
      transformed.Duration = 0; // Can be calculated based on status

      return transformed;
    }).filter(item => item.ID && item.Title); // Only keep items with ID and Title
  }

  // Transform raw data using detected column mappings
  function transformDataWithMapping(rawData, mapping) {
    console.log('🔄 Transforming data with mapping:', mapping);

    return rawData.map((row, index) => {
      const transformed = {};

      // Map each field using the detected column mapping
      transformed.ID = getFieldValue(row, mapping.id) || index + 1;
      transformed.Title = getFieldValue(row, mapping.title) || 'Untitled';
      transformed.Description = getFieldValue(row, mapping.description) || '';
      transformed.Status = getFieldValue(row, mapping.status) || 'New';
      transformed.Domain = getFieldValue(row, mapping.domain) || 'General';
      transformed.SubmittedBy = getFieldValue(row, mapping.submittedBy) || 'Unknown';
      transformed.LeadOwner = getFieldValue(row, mapping.leadOwner) || 'Unassigned';

      // Handle priority/Top5 field
      const priorityValue = getFieldValue(row, mapping.priority);
      transformed.Top5 = interpretBooleanValue(priorityValue);

      // Handle progress/duration
      const progressValue = getFieldValue(row, mapping.progress);
      transformed.Duration = parseFloat(progressValue) || 0;

      // Handle dates
      transformed.DateSubmitted = getFieldValue(row, mapping.dateSubmitted);
      transformed.ExpectedCompletion = getFieldValue(row, mapping.expectedCompletion);
      transformed.ActualCompletion = getFieldValue(row, mapping.actualCompletion);

      // Handle rating and likes
      transformed.Rating = parseFloat(getFieldValue(row, mapping.rating)) || null;
      transformed.Likes = parseInt(getFieldValue(row, mapping.likes)) || 0;

      // Add computed fields
      transformed.isComplete = transformed.Status && transformed.Status.toLowerCase().includes('complet');
      transformed.isInProgress = transformed.Status && transformed.Status.toLowerCase().includes('progress');
      transformed.isTop5 = transformed.Top5;

      return transformed;
    }).filter(item => item.ID && item.Title); // Only keep items with ID and Title
  }
  // Helper function to get field value from row
  function getFieldValue(row, fieldName) {
    if (!fieldName || !row) return null;

    const value = row[fieldName];
    if (value === undefined || value === null || value === '') return null;

    // Handle Excel date serial numbers and other special cases
    if (typeof value === 'number' && fieldName &&
            (fieldName.toLowerCase().includes('date') || fieldName.toLowerCase().includes('complet'))) {
      // Convert Excel serial date to JavaScript date
      try {
        const excelDate = new Date((value - 25569) * 86400 * 1000);
        return excelDate.toISOString();
      } catch (e) {
        return value;
      }
    }

    return value;
  }

  // Helper function to interpret boolean values
  function interpretBooleanValue(value) {
    if (value === null || value === undefined) return false;

    const str = value.toString().toLowerCase().trim();
    return str === 'true' || str === '1' || str === 'yes' || str === 'y' ||
            str === 'top5' || str === 'high' || str === 'priority';
  }

  // Load and parse data
  async function loadData() {
    try {
      console.log('🚀 Starting data load process...');
      let currentDataSource = 'database'; // will change later to be dynamic
      if (currentDataSource === 'database') {
        await loadFromDatabase();
      } else {
        await loadFromDirectory();
      }
    } catch (error) {
      console.error('❌ Error loading data:', error);
      if (currentDataSource === 'database') {
        console.log('Database connection failed, falling back to file upload or sample data');
        showFileUploadPrompt();
      } else {
        console.log('Please ensure SSCList.csv or SSCList.xlsx is in the same directory as index.html');
        showFileUploadPrompt();
      }
    }
  }
  // Load data from Azure SQL Database
  async function loadFromDatabase() {
    console.log('🗄️ Attempting to load data from Azure SQL Database...');

    try {
      // First, check database status
      const statusResponse = await fetch('/api/db-status');
      const statusData = await statusResponse.json();

      if (!statusData.connected) {
        throw new Error('Database not connected: ' + (statusData.error || 'Unknown error'));
      }

      console.log('✅ Database connection verified');
      console.log(`📊 Total records in database: ${statusData.totalRecords}`);

      // Load all ideas from database
      const response = await fetch('/api/ideas');

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const apiData = await response.json();

      if (!apiData.success) {
        throw new Error('API error: ' + (apiData.error || 'Unknown error'));
      }

      console.log('✅ Database data loaded successfully');
      console.log(`📊 Retrieved ${apiData.data.length} records from database`);

      // Transform database data to expected format
      allData = transformDatabaseData(apiData.data);

      console.log(`✅ Transformed data: ${allData.length} valid records`);
      console.log('📊 Sample record:', allData[0]);

      if (allData.length === 0) {
        throw new Error('No valid records found in database');
      }

      filteredData = [...allData];

      // Update UI
      initializeFilters();
      renderBoard();
      updateCounts();
      updateDebugInfo(`Database data loaded successfully: ${allData.length} ideas`);

      // Set active button state
      document.getElementById('loadDatabaseBtn').classList.add('active');
      document.getElementById('uploadBtn').classList.remove('active');

    } catch (error) {
      console.error('❌ Database loading error:', error);
      throw error;
    }
  }
  // Load directly from directory
  async function loadFromDirectory() {
    // Try Excel file first
    console.log('📊 Attempting to fetch SSCList.xlsx...');
    try {
      const response = await fetch('./SSCList.xlsx');
      if (response.ok) {
        console.log('✅ SSCList.xlsx found and loaded successfully');
        const arrayBuffer = await response.arrayBuffer();
        await processExcelData(arrayBuffer);
        return;
      } else {
        console.log(`❌ SSCList.xlsx fetch failed with status: ${response.status}`);
      }
    } catch (error) {
      console.log('❌ SSCList.xlsx fetch error:', error.message);
    }

    // Fallback to CSV file
    console.log('📄 Attempting to fetch SSCList.csv...');
    try {
      const response = await fetch('./SSCList.csv');
      if (response.ok) {
        console.log('✅ SSCList.csv found and loaded successfully');
        const csvText = await response.text();
        await processCSVData(csvText);
        return;
      } else {
        console.log(`❌ SSCList.csv fetch failed with status: ${response.status}`);
      }
    } catch (error) {
      console.log('❌ SSCList.csv fetch error:', error.message);
    }

    throw new Error('Neither SSCList.xlsx nor SSCList.csv could be loaded from the directory');
  }

  // Show file upload prompt
  function showFileUploadPrompt() {
    document.getElementById('totalCount').textContent = 'Click "📁 Load Data" to select your file';
    loadSampleData(); // Load sample data to show interface
  }

  // Process Excel data with enhanced structure detection
  async function processExcelData(data) {
    console.log('📊 Processing Excel data...');

    const workbook = XLSX.read(data, {
      cellStyles: true,
      cellFormulas: true,
      cellDates: true,
      cellNF: true,
      sheetStubs: true
    });

    console.log('📋 Available worksheets:', workbook.SheetNames);

    // Try to find the main data sheet
    let worksheet = null;
    let sheetName = '';

    // Common sheet names to look for
    const commonSheetNames = ['Sheet1', 'Data', 'Ideas', 'Improvements', 'List', 'Table1', 'SSC'];

    for (const name of commonSheetNames) {
      if (workbook.Sheets[name]) {
        worksheet = workbook.Sheets[name];
        sheetName = name;
        break;
      }
    }

    // If no common name found, use the first sheet
    if (!worksheet) {
      sheetName = workbook.SheetNames[0];
      worksheet = workbook.Sheets[sheetName];
    }

    console.log(`📄 Using worksheet: "${sheetName}"`);

    // Extract data with headers
    const rawData = XLSX.utils.sheet_to_json(worksheet, { header: 1 });

    if (rawData.length === 0) {
      throw new Error('No data found in Excel file');
    }

    // Find header row (first non-empty row)
    let headerRowIndex = 0;
    for (let i = 0; i < rawData.length; i++) {
      if (rawData[i] && rawData[i].some(cell => cell && cell.toString().trim())) {
        headerRowIndex = i;
        break;
      }
    }

    rawHeaders = rawData[headerRowIndex] || [];
    console.log('📋 Raw headers found:', rawHeaders);

    // Convert to objects using detected headers
    const dataRows = rawData.slice(headerRowIndex + 1);
    const objectData = dataRows.map(row => {
      const obj = {};
      rawHeaders.forEach((header, index) => {
        if (header) {
          obj[header] = row[index];
        }
      });
      return obj;
    }).filter(row => Object.values(row).some(val => val !== undefined && val !== null && val !== ''));

    await finalizeDataProcessing(objectData, rawHeaders);
  }

  // Process CSV data with enhanced structure detection
  async function processCSVData(csvText) {
    console.log('📄 Processing CSV data...');

    return new Promise((resolve, reject) => {
      Papa.parse(csvText, {
        header: true,
        dynamicTyping: true,
        skipEmptyLines: true,
        transformHeader: (header) => {
          return header.trim(); // Clean headers
        },
        complete: (results) => {
          console.log('✅ CSV parsed successfully');
          console.log(`📊 Found ${results.data.length} rows`);

          rawHeaders = results.meta.fields || [];
          console.log('📋 CSV headers:', rawHeaders);

          finalizeDataProcessing(results.data, rawHeaders);
          resolve();
        },
        error: (error) => {
          console.error('❌ CSV parsing error:', error);
          reject(error);
        }
      });
    });
  }


  async function finalizeDataProcessing(rawData, headers, source = 'file') {
    console.log('🔄 Finalizing data processing...');
    console.log(`📊 Raw data: ${rawData.length} records`);
    console.log('📋 Headers:', headers);

    // Store raw headers for debugging
    rawHeaders = headers;

    if (source === 'file') {
      // Detect column mappings for file data
      columnMapping = detectColumnMappings(headers);
      console.log('🗺️ Column mapping:', columnMapping);

      // Transform data using detected mappings
      allData = transformDataWithMapping(rawData, columnMapping);
    } else {
      // Data is already from database, use direct transformation
      allData = transformDatabaseData(rawData);
    }

    // Filter out invalid records
    const validData = allData.filter(item => item.ID && item.Title);
    console.log(`✅ Valid records after filtering: ${validData.length}`);

    if (validData.length === 0) {
      console.warn('⚠️ No valid records found - check your data structure');
      updateDebugInfo('No valid records found. Please check that your data has ID and Title columns.');
      return;
    }

    allData = validData;
    filteredData = [...allData];

    console.log('✅ Data processing completed successfully');
    console.log('📊 Sample record:', allData[0]);

    // Update UI
    initializeFilters();
    renderBoard();
    updateCounts();
    updateDebugInfo(`Data loaded successfully from ${source}: ${allData.length} ideas`);

    // Update button states
    if (source === 'file') {
      document.getElementById('uploadBtn').classList.add('active');
      document.getElementById('loadDatabaseBtn').classList.remove('active');
    }

    // Verify rendering
    setTimeout(() => {
      const totalCards = Object.values(getColumnCounts()).reduce((sum, count) => sum + count, 0);
      console.log(`🎯 Verification: ${totalCards} cards rendered across all columns`);
    }, 100);
  }
  // Handle file upload
  function handleFileUpload(event) {
    const file = event.target.files[0];
    if (!file) return;

    console.log('📁 File selected:', file.name, 'Type:', file.type, 'Size:', file.size);

    const reader = new FileReader();

    reader.onload = async function(e) {
      try {
        if (file.name.toLowerCase().endsWith('.csv')) {
          await processCSVData(e.target.result);
        } else if (file.name.toLowerCase().endsWith('.xlsx') || file.name.toLowerCase().endsWith('.xls')) {
          await processExcelData(e.target.result);
        } else {
          throw new Error('Unsupported file type. Please use CSV or Excel files.');
        }
      } catch (error) {
        console.error('❌ Error processing uploaded file:', error);
        alert('Error processing file: ' + error.message);
        updateDebugInfo(`Error: ${error.message}`);
      }
    };

    if (file.name.toLowerCase().endsWith('.csv')) {
      reader.readAsText(file);
    } else {
      reader.readAsArrayBuffer(file);
    }
  }

  // Load sample data if no file is available
  function loadSampleData() {
    console.log('⚠️ Loading sample data for demonstration');

    allData = [
      {
        ID: 851,
        Title: "Control System Enhancement",
        Description: "Implement enhanced control system for better process management",
        Status: "New",
        Domain: "ICT",
        SubmittedBy: "Raneeta Beric",
        Top5: false,
        Duration: 0,
        DateSubmitted: "2024-01-15T10:00:00.000Z"
      },
      {
        ID: 852,
        Title: "Unikey Functionality Improvement",
        Description: "Test and improve unikey functionality for better user experience",
        Status: "In Progress",
        Domain: "ICT",
        SubmittedBy: "Philip Le",
        Top5: true,
        Duration: 35,
        DateSubmitted: "2024-01-15T10:00:00.000Z"
      },
      {
        ID: 743,
        Title: "HR Magical Templating Tool",
        Description: "Utilising the Magical text expander/autofill tool to create and utilise templated chunks of text for faster, standardised responses to common queries.",
        Status: "In Progress",
        Domain: "SSC",
        SubmittedBy: "Michael Herd",
        Top5: true,
        Duration: 60,
        DateSubmitted: "2024-03-31T13:00:00.000Z"
      },
      {
        ID: 744,
        Title: "New Unikey Form Delegation Workflow",
        Description: "Addition of an extra task to RBA creations allowing delegate access to be granted by SSC. Reduces callbacks/poor customer experience.",
        Status: "Completed",
        Domain: "Consulting",
        SubmittedBy: "Vikash Rao",
        Top5: false,
        Duration: 100,
        ActualCompletion: "2024-06-10T14:00:00.000Z"
      }
    ];

    // Add computed fields
    allData.forEach(item => {
      item.isComplete = item.Status && item.Status.toLowerCase().includes('complet');
      item.isInProgress = item.Status && item.Status.toLowerCase().includes('progress');
      item.isTop5 = item.Top5;
    });

    filteredData = [...allData];
    console.log('📊 Loaded sample data:', allData.length, 'improvement ideas');

    initializeFilters();
    renderBoard();
    updateCounts();
    updateDebugInfo('Sample data loaded - upload your Excel file to see real data');
  }

  // Initialize filter dropdowns
  function initializeFilters() {
    const domains = [...new Set(allData.map(item => item.Domain).filter(Boolean))];
    const statuses = [...new Set(allData.map(item => item.Status).filter(Boolean))];

    const domainFilter = document.getElementById('domainFilter');
    const statusFilter = document.getElementById('stateFilter');


    // Clear existing options (except the first "All" option)
    domainFilter.innerHTML = '<option value="">All Domains</option>';
    statusFilter.innerHTML = '<option value="">All States</option>';

    domains.forEach(domain => {
      const option = document.createElement('option');
      option.value = domain;
      option.textContent = domain;
      domainFilter.appendChild(option);
    });

    statuses.forEach(status => {
      const option = document.createElement('option');
      option.value = status;
      option.textContent = status;
      statusFilter.appendChild(option);
    });
  }

  // Filter data based on selected filters
  function filterData() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const domainFilter = document.getElementById('domainFilter').value;
    const statusFilter = document.getElementById('stateFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;

    const startTimeVal = document.getElementById('startTime').value;
    const endTimeVal   = document.getElementById('endTime').value;

    filteredData = allData.filter(item => {
      const matchesSearch = !searchTerm ||
              item.Title?.toLowerCase().includes(searchTerm) ||
              item.Description?.toLowerCase().includes(searchTerm) ||
              item.SubmittedBy?.toLowerCase().includes(searchTerm) ||
              item.ID?.toString().toLowerCase().includes(searchTerm);

      const matchesDomain = !domainFilter || item.Domain === domainFilter;
      const matchesStatus = !statusFilter || item.Status === statusFilter;
      const matchesPriority = !priorityFilter ||
              (priorityFilter === 'true' && (item.Top5 || item.isTop5)) ||
              (priorityFilter === 'false' && !(item.Top5 || item.isTop5));

      let matchesTime = true;
      if (startTimeVal) {
        const startDate = new Date(startTimeVal);
        const itemDate  = new Date(item.DateSubmitted);
        if (itemDate < startDate) matchesTime = false;
      }
      if (endTimeVal) {
        const endDate  = new Date(endTimeVal);
        const itemDate = new Date(item.DateSubmitted);
        if (itemDate > endDate) matchesTime = false;
      }

      return matchesSearch && matchesDomain && matchesStatus && matchesPriority && matchesTime;

    });

    renderBoard();
    updateCounts();
  }

  // Map status to column
  function getColumnForStatus(status) {
    if (!status) return 'new';

    const s = status.toLowerCase();

    if (s.includes('new') || s.includes('submitted')) return 'new';
    if (s.includes('prioriti') || s.includes('approved') || s.includes('planned')) return 'prioritised';
    if (s.includes('scop') || s.includes('analy') || s.includes('review')) return 'scoping';
    if (s.includes('progress') || s.includes('implement') || s.includes('develop')) return 'inProgress';
    if (s.includes('operation') || s.includes('deploy') || s.includes('live') || s.includes('test')) return 'operational';
    if (s.includes('complet') || s.includes('done') || s.includes('finish') || s.includes('closed')) return 'completed';

    // Default mapping for unknown statuses
    return 'new';
  }

  // Get column counts for verification
  function getColumnCounts() {
    const counts = {
      new: 0,
      prioritised: 0,
      scoping: 0,
      inProgress: 0,
      operational: 0,
      completed: 0
    };

    filteredData.forEach(item => {
      const columnKey = getColumnForStatus(item.Status);
      counts[columnKey]++;
    });

    return counts;
  }

  // Render the board with cards
  function renderBoard() {
    console.log('🎨 Rendering board with', filteredData.length, 'items');

    const columns = {
      new: document.getElementById('newColumn'),
      prioritised: document.getElementById('prioritisedColumn'),
      scoping: document.getElementById('scopingColumn'),
      inProgress: document.getElementById('inProgressColumn'),
      operational: document.getElementById('operationalColumn'),
      completed: document.getElementById('completedColumn')
    };

    // Clear all columns
    Object.values(columns).forEach(column => {
      if (column) column.innerHTML = '';
    });

    const columnCounts = getColumnCounts();

    filteredData.forEach((item, index) => {
      try {
        const card = createCard(item);
        const columnKey = getColumnForStatus(item.Status);

        if (columns[columnKey]) {
          columns[columnKey].appendChild(card);

          // Log first few items for debugging
          if (index < 5) {
            console.log(`📋 Item ${index + 1}: ID ${item.ID} -> ${columnKey} column (Status: ${item.Status})`);
          }
        } else {
          console.error(`❌ Invalid column key: ${columnKey} for item`, item.ID);
        }
      } catch (error) {
        console.error('❌ Error creating card for item', item.ID, error);
      }
    });

    console.log('✅ Cards rendered per column:', columnCounts);

    // Add empty state if no items
    Object.entries(columns).forEach(([columnKey, column]) => {
      if (column && column.children.length === 0) {
        const emptyState = document.createElement('div');
        emptyState.className = 'empty-state';
        emptyState.textContent = 'No items';
        column.appendChild(emptyState);
      }
    });
  }

  // Create a card element
  function createCard(item) {
    const card = document.createElement('div');
    card.className = 'card';
    card.onclick = () => openModal(item);

    const isTop5 = item.Top5 || item.isTop5;
    const priority = isTop5 ? 'top5' : 'normal';
    const statusClass = getStatusClass(item.Status);

    card.innerHTML = `
            <div class="priority-indicator ${priority}"></div>
            <div class="card-id">CI-${item.ID}</div>
            <div class="card-title">${item.Title || 'Untitled'}</div>
            <div class="card-description">${item.Description || 'No description available'}</div>
            <div class="card-footer">
                <div class="card-state">
                    <div class="state-dot ${statusClass}"></div>
                    <span>${isTop5 ? 'Top 5' : 'Normal'}</span>
                </div>
                <div class="card-domain">${item.Domain || 'General'}</div>
            </div>
        `;

    return card;
  }

  // Get status class for styling
  function getStatusClass(status) {
    if (!status) return 'normal';
    const s = status.toLowerCase();
    if (s.includes('block') || s.includes('pause') || s.includes('stop')) return 'blocked';
    if (s.includes('urgent') || s.includes('critical') || s.includes('high')) return 'major';
    return 'normal';
  }

  // Update counts in column headers
  function updateCounts() {
    const counts = getColumnCounts();

    document.getElementById('newCount').textContent = counts.new;
    document.getElementById('prioritisedCount').textContent = counts.prioritised;
    document.getElementById('scopingCount').textContent = counts.scoping;
    document.getElementById('inProgressCount').textContent = counts.inProgress;
    document.getElementById('operationalCount').textContent = counts.operational;
    document.getElementById('completedCount').textContent = counts.completed;
    document.getElementById('totalCount').textContent = `${filteredData.length} ideas`;
  }

  // Update debug information
  function updateDebugInfo(message) {
    const debugContent = document.getElementById('debugContent');
    const timestamp = new Date().toLocaleTimeString();

    let debugHtml = `<strong>[${timestamp}]</strong> ${message}<br>`;

    if (rawHeaders.length > 0) {
      debugHtml += `<br><strong>Detected Headers:</strong> ${rawHeaders.join(', ')}<br>`;
    }

    if (Object.keys(columnMapping).length > 0) {
      debugHtml += `<br><strong>Column Mapping:</strong><br>`;
      Object.entries(columnMapping).forEach(([field, header]) => {
        debugHtml += `• ${field}: "${header}"<br>`;
      });
    }

    if (allData.length > 0) {
      debugHtml += `<br><strong>Sample Data:</strong><br>`;
      const sample = allData[0];
      Object.entries(sample).slice(0, 5).forEach(([key, value]) => {
        debugHtml += `• ${key}: "${value}"<br>`;
      });
    }

    debugContent.innerHTML = debugHtml;
  }

  // Open modal with item details
  function openModal(item) {
    const modalId = document.getElementById('modalId');
    const modalTitle = document.getElementById('modalTitle');
    const modalMeta = document.getElementById('modalMeta');
    const modalDescription = document.getElementById('modalDescription');
    const modalActivity = document.getElementById('modalActivity');
    const modalPriority = document.getElementById('modalPriority');
    const modalSubmittedBy = document.getElementById('modalSubmittedBy');
    const modalLeadOwner = document.getElementById('modalLeadOwner');
    const modalStatus = document.getElementById('modalStatus');
    const modalDomain = document.getElementById('modalDomain');
    const modalProgress = document.getElementById('modalProgress');
    const modalExpectedCompletion = document.getElementById('modalExpectedCompletion');
    const modalActualCompletion = document.getElementById('modalActualCompletion');
    const modalRating = document.getElementById('modalRating');
    const modalLikes = document.getElementById('modalLikes');

    // Set basic info
    modalId.textContent = `CI-${item.ID}`;
    modalTitle.textContent = item.Title || 'Untitled';

    // Set meta information
    const submittedDate = formatDate(item.DateSubmitted);
    const submittedBy = item.SubmittedBy;
    modalMeta.innerHTML = `
            <span>Created by ${getFirstName(submittedBy)} ${submittedDate ? submittedDate : 'recently'}</span>
            <span>•</span>
            <span>🌐 Visible to all team members</span>
        `;

    // Set description
    modalDescription.textContent = item.Description || 'No description available';

    // Set activity timeline
    modalActivity.innerHTML = `
            <div class="activity-item">
                <div class="activity-avatar">${getInitials(submittedBy)}</div>
                <div class="activity-content">
                    <div class="activity-header">
                        <span class="activity-author">${getFirstName(submittedBy)}</span>
                        <span>•</span>
                        <span class="activity-time">Submitted ${submittedDate || 'recently'}</span>
                    </div>
                    <div class="activity-text">Created this improvement idea</div>
                </div>
            </div>
            ${item.ExpectedCompletion ? `
            <div class="activity-item">
                <div class="activity-avatar">📅</div>
                <div class="activity-content">
                    <div class="activity-header">
                        <span class="activity-author">System</span>
                        <span>•</span>
                        <span class="activity-time">Auto-generated</span>
                    </div>
                    <div class="activity-text">Expected completion date set to ${formatDate(item.ExpectedCompletion)}</div>
                </div>
            </div>
            ` : ''}
            ${item.Duration > 0 ? `
            <div class="activity-item">
                <div class="activity-avatar">📊</div>
                <div class="activity-content">
                    <div class="activity-header">
                        <span class="activity-author">System</span>
                        <span>•</span>
                        <span class="activity-time">Progress update</span>
                    </div>
                    <div class="activity-text">Progress updated to ${item.Duration}%</div>
                </div>
            </div>
            ` : ''}
            ${item.ActualCompletion ? `
            <div class="activity-item">
                <div class="activity-avatar">✅</div>
                <div class="activity-content">
                    <div class="activity-header">
                        <span class="activity-author">System</span>
                        <span>•</span>
                        <span class="activity-time">${formatDate(item.ActualCompletion)}</span>
                    </div>
                    <div class="activity-text">Idea marked as completed</div>
                </div>
            </div>
            ` : ''}
        `;

    // Set sidebar properties
    const isTop5 = item.Top5 || item.isTop5;
    modalPriority.innerHTML = `
            <span class="state-badge ${isTop5 ? 'major' : 'normal'}">
                ${isTop5 ? '🔥 Top 5 Priority' : '📋 Normal Priority'}
            </span>
        `;

    modalSubmittedBy.textContent = (item.SubmittedBy ? item.SubmittedBy.split(';')[0].trim() : '') || 'Unknown';
    modalLeadOwner.textContent = (item.LeadOwner   ? item.LeadOwner.split(';')[0].trim()   : '') || 'Unassigned';
//

    modalStatus.innerHTML = `
            <span class="state-badge ${getStatusBadgeClass(item.Status)}">
                ${item.Status || 'New'}
            </span>
        `;

    modalDomain.textContent = item.Domain || 'General';
    modalProgress.textContent = `${item.Duration || 0}% complete`;
    modalExpectedCompletion.textContent = formatDateFull(item.ExpectedCompletion) || 'Not set';
    modalActualCompletion.textContent = formatDateFull(item.ActualCompletion) || 'Not completed';
    modalRating.textContent = item.Rating ? `${item.Rating}/5 ⭐` : 'Not rated';
    modalLikes.textContent = `${item.Likes || 0} 👍`;

    document.getElementById('modal').style.display = 'block';
  }

  // Helper functions
  function getStatusBadgeClass(status) {
    if (!status) return 'new';
    const s = status.toLowerCase();
    if (s.includes('new') || s.includes('submit')) return 'new';
    if (s.includes('prioriti') || s.includes('approv')) return 'prioritised';
    if (s.includes('scop') || s.includes('review')) return 'scoping';
    if (s.includes('progress') || s.includes('implement')) return 'in-progress';
    if (s.includes('operation') || s.includes('deploy')) return 'operational';
    if (s.includes('complet') || s.includes('done')) return 'completed';
    if (s.includes('pause') || s.includes('block')) return 'paused';
    return 'new';
  }

  function getFirstName(fullName) {
    if (!fullName) return 'Unknown';
    // Handle email format
    if (fullName.includes('@')) {
      const emailPart = fullName.split('@')[0];
      const namePart = emailPart.includes('.') ? emailPart.split('.')[0] : emailPart;
      return namePart.charAt(0).toUpperCase() + namePart.slice(1);
    }
    return fullName.split(' ')[0];
  }

  function getInitials(fullName) {
    if (!fullName) return 'U';
    const name = getFirstName(fullName);
    return name.charAt(0).toUpperCase();
  }

  function formatDate(dateString) {
    if (!dateString || dateString === '########') return null;
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return null;

      const now = new Date();
      const diffTime = Math.abs(now - date);
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      if (diffDays === 1) return 'yesterday';
      if (diffDays < 7) return `${diffDays} days ago`;
      if (diffDays < 30) return `${Math.ceil(diffDays / 7)} weeks ago`;
      if (diffDays < 365) return `${Math.ceil(diffDays / 30)} months ago`;
      return `${Math.ceil(diffDays / 365)} years ago`;
    } catch (error) {
      return 'recently';
    }
  }

  function formatDateFull(dateString) {
    if (!dateString || dateString === '########') return null;
    try {
      const date = new Date(dateString);
      if (isNaN(date.getTime())) return null;

      return date.toLocaleDateString('en-AU', {
        year: 'numeric',
        month: 'long',
        day: 'numeric'
      });
    } catch (error) {
      return dateString;
    }
  }

  // Close modal
  function closeModal() {
    document.getElementById('modal').style.display = 'none';
  }

  // Toggle debug panel
  function toggleDebug() {
    const debugPanel = document.getElementById('debugInfo');
    if (debugPanel.style.display === 'none') {
      debugPanel.style.display = 'block';
      updateDebugInfo('Debug panel opened');
    } else {
      debugPanel.style.display = 'none';
    }
  }

  // Event listeners
  document.getElementById('searchInput').addEventListener('input', filterData);
  document.getElementById('domainFilter').addEventListener('change', filterData);
  document.getElementById('stateFilter').addEventListener('change', filterData);
  document.getElementById('priorityFilter').addEventListener('change', filterData);
  document.getElementById('startTime').addEventListener('change', filterData);
  document.getElementById('endTime').addEventListener('change', filterData);

  // File upload event listeners
  document.getElementById('uploadBtn').addEventListener('click', () => {
    document.getElementById('fileInput').click();
  });
  document.getElementById('fileInput').addEventListener('change', handleFileUpload);

  // Refresh button
  document.getElementById('refreshBtn').addEventListener('click', () => {
    console.log('🔄 Manual refresh requested');
    document.getElementById('totalCount').textContent = 'Refreshing...';
    loadData();
  });

  // Debug button
  document.getElementById('debugBtn').addEventListener('click', toggleDebug);

  // Close modal when clicking outside
  document.getElementById('modal').addEventListener('click', function(e) {
    if (e.target === this) {
      closeModal();
    }
  });

  // Close modal with Escape key
  document.addEventListener('keydown', function(e) {
    if (e.key === 'Escape') {
      closeModal();
    }
  });

  // Initialize the application
  document.addEventListener('DOMContentLoaded', function() {
    console.log('🚀 SSC Continuous Improvement Dashboard Starting...');
    console.log('📊 Loading data from Excel file...');
    loadData();
  });

  // Initialize immediately if DOM is already loaded
  if (document.readyState === 'loading') {
    // Do nothing, wait for DOMContentLoaded
  } else {
    console.log('🚀 SSC Continuous Improvement Dashboard Starting...');
    console.log('📊 Loading data from Excel file...');
    loadData();
  }
</script>
</body>
</html>