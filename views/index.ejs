<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= title %></title>
  <style>
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }

    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
      background-color: #ffffff;
      color: #333333;
      overflow-x: hidden;
    }

    .header {
      background-color: #f8f9fa;
      padding: 12px 20px;
      border-bottom: 1px solid #e9ecef;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 1px 3px rgba(0,0,0,0.1);
    }

    .logo-section {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .logo {
      width: 32px;
      height: 32px;
      background: linear-gradient(45deg, #ff6b35 0%, #ff8c42 100%);
      border-radius: 6px;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-weight: bold;
      font-size: 16px;
    }

    .breadcrumb {
      display: flex;
      align-items: center;
      gap: 8px;
      font-size: 14px;
      color: #6c757d;
    }

    .board-title {
      font-size: 16px;
      font-weight: 600;
      color: #333333;
    }

    .header-controls {
      display: flex;
      align-items: center;
      gap: 15px;
    }

    .search-header {
      position: relative;
    }

    .search-header input {
      background-color: #ffffff;
      border: 1px solid #ced4da;
      border-radius: 6px;
      padding: 8px 12px 8px 35px;
      color: #333333;
      font-size: 14px;
      width: 300px;
    }

    .search-header input::placeholder {
      color: #6c757d;
    }

    .search-header input:focus {
      outline: none;
      border-color: #ff6b35;
      box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.2);
    }

    .search-icon {
      position: absolute;
      left: 10px;
      top: 50%;
      transform: translateY(-50%);
      color: #6c757d;
      font-size: 16px;
    }

    .view-controls {
      display: flex;
      align-items: center;
      gap: 10px;
      font-size: 12px;
      color: #6c757d;
    }

    .total-count {
      color: #6c757d;
      font-size: 14px;
    }

    /* Database Status Panel */
    .db-status {
      background-color: #f8f9fa;
      border: 1px solid #e9ecef;
      border-radius: 8px;
      padding: 16px;
      margin: 20px;
      display: flex;
      align-items: center;
      justify-content: space-between;
    }

    .db-status.connected {
      background-color: #d4edda;
      border-color: #c3e6cb;
      color: #155724;
    }

    .db-status.disconnected {
      background-color: #f8d7da;
      border-color: #f5c6cb;
      color: #721c24;
    }

    .db-info {
      display: flex;
      align-items: center;
      gap: 12px;
    }

    .db-icon {
      font-size: 24px;
    }

    .db-details h3 {
      font-size: 16px;
      margin-bottom: 4px;
    }

    .db-details p {
      font-size: 12px;
      opacity: 0.8;
      margin: 2px 0;
    }

    .db-actions {
      display: flex;
      gap: 8px;
    }

    .btn {
      background: #ff6b35;
      color: white;
      border: none;
      padding: 8px 12px;
      border-radius: 6px;
      cursor: pointer;
      font-size: 12px;
      transition: background-color 0.2s;
    }

    .btn:hover {
      background: #e55a2d;
    }

    .btn.secondary {
      background: #6c757d;
    }

    .btn.secondary:hover {
      background: #5a6268;
    }

    .btn.success {
      background: #28a745;
    }

    .btn.success:hover {
      background: #218838;
    }

    .container {
      display: flex;
      height: calc(100vh - 140px);
    }

    /* Sidebar */
    .sidebar {
      width: 200px;
      background-color: #f8f9fa;
      border-right: 1px solid #e9ecef;
      padding: 20px 0;
    }

    .nav-menu {
      padding: 0 15px;
    }

    .nav-item {
      display: flex;
      align-items: center;
      padding: 10px 12px;
      color: #6c757d;
      text-decoration: none;
      font-size: 14px;
      border-radius: 6px;
      margin-bottom: 4px;
      transition: all 0.2s;
    }

    .nav-item:hover {
      background-color: #e9ecef;
      color: #333333;
    }

    .nav-item.active {
      background-color: #ff6b35;
      color: white;
    }

    .nav-icon {
      width: 16px;
      height: 16px;
      margin-right: 10px;
    }

    /* Main Content */
    .main-content {
      flex: 1;
      padding: 20px;
      overflow: auto;
      background-color: #ffffff;
    }

    .filters-section {
      display: flex;
      gap: 12px;
      margin-bottom: 20px;
      flex-wrap: wrap;
    }

    .filter-select {
      background-color: #ffffff;
      border: 1px solid #ced4da;
      border-radius: 6px;
      padding: 8px 12px;
      color: #333333;
      font-size: 14px;
      min-width: 140px;
    }

    .filter-select:focus {
      outline: none;
      border-color: #ff6b35;
      box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.2);
    }

    /* Board */
    .board-container {
      display: flex;
      gap: 20px;
      overflow-x: auto;
      padding-bottom: 20px;
    }

    .column {
      min-width: 280px;
      background-color: #f8f9fa;
      border-radius: 8px;
      padding: 16px;
      border: 1px solid #e9ecef;
    }

    .column-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 16px;
      padding-bottom: 12px;
      border-bottom: 1px solid #e9ecef;
    }

    .column-title {
      font-size: 14px;
      font-weight: 600;
      color: #333333;
    }

    .column-count {
      background-color: #ff6b35;
      color: white;
      padding: 2px 8px;
      border-radius: 12px;
      font-size: 12px;
      font-weight: 500;
    }

    .column-content {
      max-height: calc(100vh - 200px);
      overflow-y: auto;
    }

    .card {
      background-color: #ffffff;
      border: 1px solid #e9ecef;
      border-radius: 8px;
      padding: 12px;
      margin-bottom: 12px;
      cursor: pointer;
      transition: all 0.2s ease;
      position: relative;
    }

    .card:hover {
      border-color: #ff6b35;
      transform: translateY(-1px);
      box-shadow: 0 4px 12px rgba(255, 107, 53, 0.15);
    }

    .card-id {
      font-size: 12px;
      font-weight: 600;
      color: #6c757d;
      margin-bottom: 6px;
    }

    .card-title {
      font-size: 14px;
      font-weight: 500;
      color: #333333;
      line-height: 1.4;
      margin-bottom: 8px;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .card-description {
      font-size: 12px;
      color: #6c757d;
      line-height: 1.3;
      margin-bottom: 12px;
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .card-footer {
      display: flex;
      align-items: center;
      justify-content: space-between;
      font-size: 11px;
    }

    .card-state {
      display: flex;
      align-items: center;
      gap: 6px;
    }

    .state-dot {
      width: 6px;
      height: 6px;
      border-radius: 50%;
    }

    .state-dot.normal { background-color: #28a745; }
    .state-dot.blocked { background-color: #dc3545; }
    .state-dot.major { background-color: #ff6b35; }

    .card-domain {
      background-color: #e9ecef;
      color: #333333;
      padding: 2px 6px;
      border-radius: 4px;
      font-size: 10px;
    }

    .priority-indicator {
      position: absolute;
      left: 0;
      top: 0;
      bottom: 0;
      width: 4px;
      border-radius: 4px 0 0 4px;
    }

    .priority-indicator.top5 { background-color: #ff6b35; }
    .priority-indicator.normal { background-color: #28a745; }

    .empty-state {
      text-align: center;
      color: #6c757d;
      font-style: italic;
      padding: 40px 20px;
      font-size: 14px;
    }

    .loading {
      text-align: center;
      padding: 40px 20px;
      color: #6c757d;
    }

    .error-message {
      background-color: #f8d7da;
      border: 1px solid #f5c6cb;
      color: #721c24;
      padding: 12px;
      border-radius: 6px;
      margin: 20px;
    }

    /* Responsive */
    @media (max-width: 768px) {
      .sidebar {
        display: none;
      }

      .board-container {
        flex-direction: column;
      }

      .column {
        min-width: auto;
      }

      .header-controls {
        flex-direction: column;
        gap: 10px;
      }

      .search-header input {
        width: 200px;
      }

      .db-status {
        flex-direction: column;
        gap: 12px;
        align-items: flex-start;
      }
    }
  </style>
</head>
<body>

<!-- Header -->
<div class="header">
  <div class="logo-section">
    <div class="logo">SSC</div>
    <div class="breadcrumb">
      <span>Agile boards</span>
      <span>/</span>
      <span class="board-title">SSC Continuous Improvement Board</span>
    </div>
  </div>

  <div class="header-controls">
    <div class="search-header">
      <span class="search-icon">üîç</span>
      <input type="text" id="searchInput" placeholder="Filter ideas on the board">
    </div>
    <div class="view-controls">
      <span class="total-count" id="totalCount">Loading...</span>
      <button id="refreshBtn" class="btn">
        üîÑ Refresh
      </button>
      <button id="loadFromDbBtn" class="btn success">
        üóÑÔ∏è Load from DB
      </button>
      <span>üìä</span>
    </div>
  </div>
</div>

<!-- Database Status Panel -->
<div class="db-status <%= dbStatus.connected ? 'connected' : 'disconnected' %>" id="dbStatusPanel">
  <div class="db-info">
    <div class="db-icon">
      <%= dbStatus.connected ? '‚úÖ' : '‚ùå' %>
    </div>
    <div class="db-details">
      <h3 id="dbStatusTitle">
        <%= dbStatus.connected ? 'Azure SQL Database Connected' : 'Database Connection Failed' %>
      </h3>
      <p id="dbStatusDetails">
        <% if (dbStatus.connected) { %>
          Connected to Azure SQL ‚Ä¢ <%= dbStatus.data ? dbStatus.data.length : 0 %> records loaded ‚Ä¢ Last updated: <%= new Date(dbStatus.timestamp).toLocaleTimeString() %>
        <% } else { %>
          Error: <%= dbStatus.error || 'Unable to connect to database' %>
        <% } %>
      </p>
      <% if (dbStatus.connected && dbStatus.data && dbStatus.data.length > 0) { %>
        <p>Latest ideas:
          <% dbStatus.data.slice(0, 3).forEach((idea, index) => { %>
            <%= idea.Title || 'Untitled' %><%= index < 2 && index < dbStatus.data.length - 1 ? ', ' : '' %>
          <% }) %>
        </p>
      <% } %>
    </div>
  </div>
  <div class="db-actions">
    <button id="testConnectionBtn" class="btn secondary">üîó Test Connection</button>
    <button id="refreshDataBtn" class="btn">üìä Refresh Data</button>
  </div>
</div>

<!-- Error Message Area -->
<div id="errorMessage" class="error-message" style="display: none;"></div>

<div class="container">
  <!-- Sidebar -->
  <div class="sidebar">
    <nav class="nav-menu">
      <a href="#" class="nav-item">
        <span class="nav-icon">‚úì</span>
        Issues
      </a>
      <a href="#" class="nav-item">
        <span class="nav-icon">üìä</span>
        Dashboards
      </a>
      <a href="#" class="nav-item active">
        <span class="nav-icon">üìã</span>
        Agile Boards
      </a>
      <a href="#" class="nav-item">
        <span class="nav-icon">üìà</span>
        Reports
      </a>
      <a href="#" class="nav-item">
        <span class="nav-icon">üìÅ</span>
        Projects
      </a>
      <a href="#" class="nav-item">
        <span class="nav-icon">üìö</span>
        Knowledge Base
      </a>
    </nav>
  </div>

  <!-- Main Content -->
  <div class="main-content">
    <!-- Filters -->
    <div class="filters-section">
      <select class="filter-select" id="domainFilter">
        <option value="">All Domains</option>
      </select>
      <select class="filter-select" id="stateFilter">
        <option value="">All States</option>
      </select>
      <select class="filter-select" id="priorityFilter">
        <option value="">All Priorities</option>
        <option value="true">Top 5 Only</option>
        <option value="false">Regular Priority</option>
      </select>
    </div>

    <!-- Board -->
    <div class="board-container">
      <div class="column">
        <div class="column-header">
          <span class="column-title">New</span>
          <span class="column-count" id="newCount">0</span>
        </div>
        <div class="column-content" id="newColumn">
          <div class="loading">Loading data from database...</div>
        </div>
      </div>

      <div class="column">
        <div class="column-header">
          <span class="column-title">Prioritised</span>
          <span class="column-count" id="prioritisedCount">0</span>
        </div>
        <div class="column-content" id="prioritisedColumn">
          <div class="loading">Loading data from database...</div>
        </div>
      </div>

      <div class="column">
        <div class="column-header">
          <span class="column-title">Scoping</span>
          <span class="column-count" id="scopingCount">0</span>
        </div>
        <div class="column-content" id="scopingColumn">
          <div class="loading">Loading data from database...</div>
        </div>
      </div>

      <div class="column">
        <div class="column-header">
          <span class="column-title">In Progress</span>
          <span class="column-count" id="inProgressCount">0</span>
        </div>
        <div class="column-content" id="inProgressColumn">
          <div class="loading">Loading data from database...</div>
        </div>
      </div>

      <div class="column">
        <div class="column-header">
          <span class="column-title">Operational</span>
          <span class="column-count" id="operationalCount">0</span>
        </div>
        <div class="column-content" id="operationalColumn">
          <div class="loading">Loading data from database...</div>
        </div>
      </div>

      <div class="column">
        <div class="column-header">
          <span class="column-title">Completed</span>
          <span class="column-count" id="completedCount">0</span>
        </div>
        <div class="column-content" id="completedColumn">
          <div class="loading">Loading data from database...</div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  let allData = [];
  let filteredData = [];

  // Load data from database API
  async function loadDataFromDatabase() {
    try {
      console.log('üöÄ Loading data from Azure SQL Database...');
      document.getElementById('totalCount').textContent = 'Loading from database...';

      const response = await fetch('/api/ideas');
      const result = await response.json();

      if (result.success) {
        allData = result.data.map(item => ({
          ID: item.ID,
          Title: item.Title || 'Untitled',
          Description: item.Description || '',
          Status: item.Status || 'New',
          Domain: item.Domain || 'General',
          SubmittedBy: item.SubmittedBy || 'Unknown',
          LeadOwner: item.LeadOwner || 'Unassigned',
          Top5: item.Top5 || false,
          Duration: item.Duration || 0,
          DateSubmitted: item.DateSubmitted,
          ExpectedCompletion: item.ExpectedCompletion,
          ActualCompletion: item.ActualCompletion,
          Rating: item.Rating,
          Likes: item.Likes || 0,
          isComplete: item.Status && item.Status.toLowerCase().includes('complet'),
          isInProgress: item.Status && item.Status.toLowerCase().includes('progress'),
          isTop5: item.Top5 || false
        }));

        filteredData = [...allData];
        console.log(`‚úÖ Loaded ${allData.length} records from database`);

        initializeFilters();
        renderBoard();
        updateCounts();
        hideError();

      } else {
        throw new Error(result.error || 'Failed to load data from database');
      }
    } catch (error) {
      console.error('‚ùå Error loading data from database:', error);
      showError(`Failed to load data from database: ${error.message}`);
      loadSampleData(); // Fallback to sample data
    }
  }

  // Test database connection
  async function testDatabaseConnection() {
    try {
      document.getElementById('testConnectionBtn').textContent = 'üîÑ Testing...';

      const response = await fetch('/api/db-status');
      const status = await response.json();

      updateDatabaseStatus(status);

    } catch (error) {
      console.error('‚ùå Error testing database connection:', error);
      updateDatabaseStatus({
        connected: false,
        error: error.message,
        timestamp: new Date().toISOString()
      });
    } finally {
      document.getElementById('testConnectionBtn').textContent = 'üîó Test Connection';
    }
  }

  // Update database status panel
  function updateDatabaseStatus(status) {
    const panel = document.getElementById('dbStatusPanel');
    const title = document.getElementById('dbStatusTitle');
    const details = document.getElementById('dbStatusDetails');

    if (status.connected) {
      panel.className = 'db-status connected';
      title.innerHTML = '‚úÖ Azure SQL Database Connected';

      let detailsText = `Connected to Azure SQL ‚Ä¢ Last checked: ${new Date(status.timestamp).toLocaleTimeString()}`;
      if (status.totalRecords) {
        detailsText += ` ‚Ä¢ ${status.totalRecords} total records`;
      }
      if (status.sampleData && status.sampleData.length > 0) {
        const sampleTitles = status.sampleData.map(item => item.Title || 'Untitled').join(', ');
        detailsText += `<br>Recent ideas: ${sampleTitles}`;
      }

      details.innerHTML = detailsText;
    } else {
      panel.className = 'db-status disconnected';
      title.innerHTML = '‚ùå Database Connection Failed';
      details.innerHTML = `Error: ${status.error || 'Unable to connect to database'}<br>Last checked: ${new Date(status.timestamp).toLocaleTimeString()}`;
    }
  }

  // Show error message
  function showError(message) {
    const errorDiv = document.getElementById('errorMessage');
    errorDiv.textContent = message;
    errorDiv.style.display = 'block';
  }

  // Hide error message
  function hideError() {
    document.getElementById('errorMessage').style.display = 'none';
  }

  // Load sample data (fallback)
  function loadSampleData() {
    console.log('‚ö†Ô∏è Loading sample data as fallback');

    allData = [
      {
        ID: 851,
        Title: "Control System Enhancement",
        Description: "Implement enhanced control system for better process management",
        Status: "New",
        Domain: "ICT",
        SubmittedBy: "Raneeta Beric",
        Top5: false,
        Duration: 0,
        DateSubmitted: "2024-01-15T10:00:00.000Z",
        isComplete: false,
        isInProgress: false,
        isTop5: false
      },
      {
        ID: 852,
        Title: "Unikey Functionality Improvement",
        Description: "Test and improve unikey functionality for better user experience",
        Status: "In Progress",
        Domain: "ICT",
        SubmittedBy: "Philip Le",
        Top5: true,
        Duration: 35,
        DateSubmitted: "2024-01-15T10:00:00.000Z",
        isComplete: false,
        isInProgress: true,
        isTop5: true
      }
    ];

    filteredData = [...allData];
    initializeFilters();
    renderBoard();
    updateCounts();
  }

  // Initialize filter dropdowns
  function initializeFilters() {
    const domains = [...new Set(allData.map(item => item.Domain).filter(Boolean))];
    const statuses = [...new Set(allData.map(item => item.Status).filter(Boolean))];

    const domainFilter = document.getElementById('domainFilter');
    const statusFilter = document.getElementById('stateFilter');

    domainFilter.innerHTML = '<option value="">All Domains</option>';
    statusFilter.innerHTML = '<option value="">All States</option>';

    domains.forEach(domain => {
      const option = document.createElement('option');
      option.value = domain;
      option.textContent = domain;
      domainFilter.appendChild(option);
    });

    statuses.forEach(status => {
      const option = document.createElement('option');
      option.value = status;
      option.textContent = status;
      statusFilter.appendChild(option);
    });
  }

  // Filter data
  function filterData() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const domainFilter = document.getElementById('domainFilter').value;
    const statusFilter = document.getElementById('stateFilter').value;
    const priorityFilter = document.getElementById('priorityFilter').value;

    filteredData = allData.filter(item => {
      const matchesSearch = !searchTerm ||
              item.Title?.toLowerCase().includes(searchTerm) ||
              item.Description?.toLowerCase().includes(searchTerm) ||
              item.SubmittedBy?.toLowerCase().includes(searchTerm) ||
              item.ID?.toString().includes(searchTerm);

      const matchesDomain = !domainFilter || item.Domain === domainFilter;
      const matchesStatus = !statusFilter || item.Status === statusFilter;
      const matchesPriority = !priorityFilter ||
              (priorityFilter === 'true' && item.isTop5) ||
              (priorityFilter === 'false' && !item.isTop5);

      return matchesSearch && matchesDomain && matchesStatus && matchesPriority;
    });

    renderBoard();
    updateCounts();
  }

  // Map status to column
  function getColumnForStatus(status) {
    if (!status) return 'new';

    const s = status.toLowerCase();

    if (s.includes('new') || s.includes('submitted')) return 'new';
    if (s.includes('prioriti') || s.includes('approved') || s.includes('planned')) return 'prioritised';
    if (s.includes('scop') || s.includes('analy') || s.includes('review')) return 'scoping';
    if (s.includes('progress') || s.includes('implement') || s.includes('develop')) return 'inProgress';
    if (s.includes('operation') || s.includes('deploy') || s.includes('live') || s.includes('test')) return 'operational';
    if (s.includes('complet') || s.includes('done') || s.includes('finish') || s.includes('closed')) return 'completed';

    return 'new';
  }

  // Get column counts
  function getColumnCounts() {
    const counts = {
      new: 0,
      prioritised: 0,
      scoping: 0,
      inProgress: 0,
      operational: 0,
      completed: 0
    };

    filteredData.forEach(item => {
      const columnKey = getColumnForStatus(item.Status);
      counts[columnKey]++;
    });

    return counts;
  }

  // Render the board
  function renderBoard() {
    const columns = {
      new: document.getElementById('newColumn'),
      prioritised: document.getElementById('prioritisedColumn'),
      scoping: document.getElementById('scopingColumn'),
      inProgress: document.getElementById('inProgressColumn'),
      operational: document.getElementById('operationalColumn'),
      completed: document.getElementById('completedColumn')
    };

    // Clear all columns
    Object.values(columns).forEach(column => {
      if (column) column.innerHTML = '';
    });

    const columnCounts = getColumnCounts();

    filteredData.forEach(item => {
      const card = createCard(item);
      const columnKey = getColumnForStatus(item.Status);

      if (columns[columnKey]) {
        columns[columnKey].appendChild(card);
      }
    });

    // Add empty state if no items
    Object.entries(columns).forEach(([columnKey, column]) => {
      if (column && column.children.length === 0) {
        const emptyState = document.createElement('div');
        emptyState.className = 'empty-state';
        emptyState.textContent = 'No items';
        column.appendChild(emptyState);
      }
    });
  }

  // Create a card element
  function createCard(item) {
    const card = document.createElement('div');
    card.className = 'card';

    const isTop5 = item.Top5 || item.isTop5;
    const priority = isTop5 ? 'top5' : 'normal';
    const statusClass = getStatusClass(item.Status);

    card.innerHTML = `
      <div class="priority-indicator ${priority}"></div>
      <div class="card-id">CI-${item.ID}</div>
      <div class="card-title">${item.Title || 'Untitled'}</div>
      <div class="card-description">${item.Description || 'No description available'}</div>
      <div class="card-footer">
        <div class="card-state">
          <div class="state-dot ${statusClass}"></div>
          <span>${isTop5 ? 'Top 5' : 'Normal'}</span>
        </div>
        <div class="card-domain">${item.Domain || 'General'}</div>
      </div>
    `;

    return card;
  }

  // Get status class for styling
  function getStatusClass(status) {
    if (!status) return 'normal';
    const s = status.toLowerCase();
    if (s.includes('block') || s.includes('pause') || s.includes('stop')) return 'blocked';
    if (s.includes('urgent') || s.includes('critical') || s.includes('high')) return 'major';
    return 'normal';
  }

  // Update counts in column headers
  function updateCounts() {
    const counts = getColumnCounts();

    document.getElementById('newCount').textContent = counts.new;
    document.getElementById('prioritisedCount').textContent = counts.prioritised;
    document.getElementById('scopingCount').textContent = counts.scoping;
    document.getElementById('inProgressCount').textContent = counts.inProgress;
    document.getElementById('operationalCount').textContent = counts.operational;
    document.getElementById('completedCount').textContent = counts.completed;
    document.getElementById('totalCount').textContent = `${filteredData.length} ideas`;
  }

  // Event listeners
  document.getElementById('searchInput').addEventListener('input', filterData);
  document.getElementById('domainFilter').addEventListener('change', filterData);
  document.getElementById('stateFilter').addEventListener('change', filterData);
  document.getElementById('priorityFilter').addEventListener('change', filterData);

  // Button event listeners
  document.getElementById('refreshBtn').addEventListener('click', () => {
    console.log('üîÑ Manual refresh requested');
    loadDataFromDatabase();
  });

  document.getElementById('loadFromDbBtn').addEventListener('click', () => {
    console.log('üóÑÔ∏è Load from DB requested');
    loadDataFromDatabase();
  });

  document.getElementById('testConnectionBtn').addEventListener('click', testDatabaseConnection);

  document.getElementById('refreshDataBtn').addEventListener('click', () => {
    console.log('üìä Refresh data requested');
    loadDataFromDatabase();
  });

  // Initialize the application
  document.addEventListener('DOMContentLoaded', function() {
    console.log('üöÄ SSC Continuous Improvement Dashboard Starting...');
    console.log('üóÑÔ∏è Loading data from Azure SQL Database...');

    // Load data from database on startup
    loadDataFromDatabase();

    // Test connection every 30 seconds
    setInterval(testDatabaseConnection, 30000);
  });

  // Initialize immediately if DOM is already loaded
  if (document.readyState === 'loading') {
    // Wait for DOMContentLoaded
  } else {
    console.log('üöÄ SSC Continuous Improvement Dashboard Starting...');
    console.log('üóÑÔ∏è Loading data from Azure SQL Database...');
    loadDataFromDatabase();
    setInterval(testDatabaseConnection, 30000);
  }
</script>

</body>
</html>