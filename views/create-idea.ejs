<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Tell us your idea - SSC Continuous Improvement</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
        :root {
            /* Light theme variables */
            --bg-primary: #f8f9fa;
            --bg-secondary: #ffffff;
            --bg-tertiary: #f0f2f5;
            --text-primary: #333333;
            --text-secondary: #6c757d;
            --border-color: #e9ecef;
            --border-hover: #ced4da;
            --shadow-light: rgba(0,0,0,0.05);
            --shadow-medium: rgba(0,0,0,0.1);
            --shadow-dark: rgba(0,0,0,0.15);
            --accent-primary: #ff6b35;
            --accent-secondary: #e64626;
            --accent-light: rgba(255, 107, 53, 0.1);
            --success-color: #28a745;
            --success-bg: #d4edda;
            --success-border: #c3e6cb;
            --success-text: #155724;
            --error-color: #dc3545;
            --error-bg: #f8d7da;
            --error-border: #f5c6cb;
            --error-text: #721c24;
            --input-bg: #fafbfc;
            --placeholder-color: #6c757d;
            --gradient-start: #c3cfe2;
            --gradient-end: #f5f7fa;
        }

        [data-theme="dark"] {
            /* Dark theme variables */
            --bg-primary: #1f2021;
            --bg-secondary: #121212;
            --bg-tertiary: #242527;
            --text-primary: #ffffff;
            --text-secondary: #9098a2;
            --border-color: #484850;
            --border-hover: #5a5a5f;
            --shadow-light: rgba(0,0,0,0.3);
            --shadow-medium: rgba(0,0,0,0.4);
            --shadow-dark: rgba(0,0,0,0.5);
            --accent-primary: #ff6b35;
            --accent-secondary: #e64626;
            --accent-light: rgba(255, 107, 53, 0.2);
            --success-color: #28a745;
            --success-bg: #1e3a2e;
            --success-border: #2d5a3d;
            --success-text: #4ade80;
            --error-color: #dc3545;
            --error-bg: #3a1e1e;
            --error-border: #5a2d2d;
            --error-text: #f87171;
            --input-bg: #242527;
            --placeholder-color: #9098a2;
            --gradient-start: #f5f7fa;
            --gradient-end: #c3cfe2;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, var(--gradient-start) 0%, var(--gradient-end) 100%);
            min-height: 100vh;
            padding: 20px 0;
            position: relative;
            overflow-x: hidden;
            overflow-y: auto;
            color: var(--text-primary);
            transition: all 0.3s ease;
        }

        .page-wrapper {
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: flex-start;
            min-height: 100vh;
            padding: 10px 20px 40px;
        }

        .scroll-indicator {
            position: fixed;
            bottom: 30px;
            left: 50%;
            transform: translateX(-50%);
            background: rgba(255, 107, 53, 0.9);
            color: white;
            padding: 12px 20px;
            border-radius: 25px;
            font-size: 14px;
            font-weight: 500;
            box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
            animation: bounce 2s infinite;
            z-index: 1000;
            transition: opacity 0.3s ease;
        }

        .scroll-indicator.hidden {
            opacity: 0;
            pointer-events: none;
        }

        @keyframes bounce {
            0%, 20%, 50%, 80%, 100% {
                transform: translateX(-50%) translateY(0);
            }
            40% {
                transform: translateX(-50%) translateY(-10px);
            }
            60% {
                transform: translateX(-50%) translateY(-5px);
            }
        }

        .lightbulb-pattern {
            position: absolute;
            width: 100%;
            height: 100%;
            opacity: 0.03;
            pointer-events: none;
        }

        .lightbulb {
            position: absolute;
            font-size: 60px;
            color: var(--text-secondary);
            animation: float 6s ease-in-out infinite;
        }

        .lightbulb:nth-child(odd) {
            animation-delay: -3s;
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px) rotate(0deg); }
            50% { transform: translateY(-20px) rotate(5deg); }
        }

        .back-button {
            position: absolute;
            top: 30px;
            left: 30px;
            width: 50px;
            height: 50px;
            background: var(--bg-secondary);
            border: 1px solid var(--border-color);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            cursor: pointer;
            font-size: 20px;
            color: var(--text-secondary);
            transition: all 0.3s ease;
            box-shadow: 0 4px 15px var(--shadow-light);
        }

        .back-button:hover {
            background: var(--bg-tertiary);
            transform: translateY(-2px);
            box-shadow: 0 6px 20px var(--shadow-medium);
            color: var(--text-primary);
        }

        .form-container {
            background: var(--bg-secondary);
            border-radius: 20px;
            padding: 40px;
            box-shadow: 0 20px 60px var(--shadow-dark);
            width: 100%;
            max-width: 600px;
            position: relative;
            animation: slideUp 0.6s ease-out;
            margin: 0 auto;
            max-height: none;
            border: 1px solid var(--border-color);
            transition: all 0.3s ease;
        }

        .form-container::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            height: 10px;
            background: linear-gradient(135deg, var(--gradient-end) 0%, var(--shadow-light) 100%);
            border-radius: 20px 20px 0 0;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        .form-container.show-top-shadow::before {
            opacity: 1;
        }

        .form-container::after {
            content: '';
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            height: 20px;
            background: linear-gradient(0deg, var(--shadow-light) 0%, transparent 100%);
            border-radius: 0 0 20px 20px;
            opacity: 0;
            transition: opacity 0.3s ease;
            pointer-events: none;
        }

        .form-container.show-bottom-shadow::after {
            opacity: 1;
        }

        @keyframes slideUp {
            from {
                opacity: 0;
                transform: translateY(30px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .form-header {
            text-align: center;
            margin-bottom: 40px;
        }

        .lightbulb-icon {
            width: 80px;
            height: 80px;
            background: linear-gradient(45deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin: 0 auto 20px;
            font-size: 35px;
            color: white;
            box-shadow: 0 8px 25px var(--accent-light);
        }

        .form-title {
            font-size: 28px;
            font-weight: 600;
            color: var(--text-primary);
            margin-bottom: 8px;
        }

        .form-subtitle {
            color: var(--text-secondary);
            font-size: 16px;
        }

        .form-group {
            margin-bottom: 25px;
        }

        .form-label {
            display: block;
            font-size: 16px;
            font-weight: 500;
            color: var(--text-primary);
            margin-bottom: 8px;
        }

        .form-input {
            width: 100%;
            padding: 15px 20px;
            border: 2px solid var(--border-color);
            border-radius: 12px;
            font-size: 16px;
            transition: all 0.3s ease;
            background: var(--input-bg);
            color: var(--text-primary);
        }

        .form-input::placeholder {
            color: var(--placeholder-color);
        }

        .form-input:focus {
            outline: none;
            border-color: var(--accent-primary);
            background: var(--bg-secondary);
            box-shadow: 0 0 0 3px var(--accent-light);
        }

        .form-textarea {
            min-height: 120px;
            resize: vertical;
            font-family: inherit;
        }

        .form-select {
            appearance: none;
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 12px center;
            background-repeat: no-repeat;
            background-size: 16px;
            cursor: pointer;
        }

        .file-upload-area {
            border: 2px dashed var(--border-color);
            border-radius: 12px;
            padding: 30px;
            text-align: center;
            background: var(--input-bg);
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }

        .file-upload-area:hover {
            border-color: var(--accent-primary);
            background: var(--accent-light);
        }

        .file-upload-area.dragover {
            border-color: var(--accent-primary);
            background: var(--accent-light);
        }

        .file-upload-icon {
            font-size: 24px;
            color: var(--text-secondary);
            margin-bottom: 10px;
        }

        .file-upload-text {
            color: var(--text-secondary);
            font-size: 14px;
        }

        .file-input {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }

        .file-list {
            margin-top: 15px;
            padding: 0;
            list-style: none;
        }

        .file-item {
            display: flex;
            align-items: center;
            justify-content: space-between;
            padding: 10px 15px;
            background: var(--bg-tertiary);
            border-radius: 8px;
            margin-bottom: 8px;
            border: 1px solid var(--border-color);
        }

        .file-item-info {
            display: flex;
            align-items: center;
            gap: 10px;
            color: var(--text-primary);
        }

        .file-remove {
            background: none;
            border: none;
            color: var(--error-color);
            cursor: pointer;
            font-size: 16px;
            padding: 5px;
            border-radius: 4px;
            transition: background-color 0.3s ease;
        }

        .file-remove:hover {
            background: var(--error-bg);
        }

        .form-actions {
            display: flex;
            gap: 15px;
            justify-content: flex-end;
            margin-top: 30px;
        }

        .btn {
            padding: 15px 30px;
            border: none;
            border-radius: 12px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
        }

        .btn-secondary {
            background: var(--bg-tertiary);
            color: var(--text-secondary);
            border: 2px solid var(--border-color);
        }

        .btn-secondary:hover {
            background: var(--border-color);
            transform: translateY(-1px);
            color: var(--text-primary);
        }

        .btn-primary {
            background: linear-gradient(45deg, var(--accent-primary) 0%, var(--accent-secondary) 100%);
            color: white;
            box-shadow: 0 4px 15px var(--accent-light);
        }

        .btn-primary:hover {
            transform: translateY(-2px);
            box-shadow: 0 6px 20px var(--accent-light);
        }

        .btn-primary:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none;
        }

        .loading-spinner {
            width: 20px;
            height: 20px;
            border: 2px solid transparent;
            border-top: 2px solid currentColor;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            to { transform: rotate(360deg); }
        }

        .success-message {
            display: none;
            text-align: center;
            padding: 20px;
            background: var(--success-bg);
            color: var(--success-text);
            border-radius: 12px;
            margin-bottom: 20px;
            border: 1px solid var(--success-border);
            transition: all 0.3s ease;
        }

        .success-message.show {
            display: block;
            animation: slideDown 0.5s ease-out;
        }

        @keyframes slideDown {
            from {
                opacity: 0;
                transform: translateY(-10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .error-message {
            display: none;
            text-align: center;
            padding: 20px;
            background: var(--error-bg);
            color: var(--error-text);
            border-radius: 12px;
            margin-bottom: 20px;
            border: 1px solid var(--error-border);
            transition: all 0.3s ease;
        }

        .error-message.show {
            display: block;
            animation: slideDown 0.5s ease-out;
        }

        .required {
            color: var(--error-color);
        }

        @media (max-width: 768px) {
            .page-wrapper {
                padding: 60px 15px 20px;
            }

            .form-container {
                padding: 30px 20px;
                margin: 0;
            }

            .form-actions {
                flex-direction: column;
            }

            .btn {
                justify-content: center;
            }

            .back-button {
                top: 20px;
                left: 20px;
                width: 45px;
                height: 45px;
            }

            .scroll-progress-container {
                right: 15px;
            }

            .scroll-progress-track {
                height: 150px;
                width: 3px;
            }
        }

        @media (max-height: 800px) {
            .scroll-progress-container {
                display: block;
            }
        }

        @media (min-height: 1000px) {
            .scroll-progress-track {
                height: 250px;
            }
        }
    </style>
</head>
<body>
<div class="page-wrapper">
    <button class="back-button" onclick="goBack()">
        <i class="fas fa-arrow-left"></i>
    </button>

    <div class="form-container" id="formContainer">
        <div class="success-message" id="successMessage">
            <i class="fas fa-check-circle"></i>
            <strong>Success!</strong> Your idea has been submitted successfully.
        </div>

        <div class="error-message" id="errorMessage">
            <i class="fas fa-exclamation-triangle"></i>
            <strong>Error!</strong> <span id="errorText">Something went wrong. Please try again.</span>
        </div>

        <div class="form-header">
            <div class="lightbulb-icon">
                <i class="fas fa-lightbulb"></i>
            </div>
            <h1 class="form-title">Tell us your idea</h1>
            <p class="form-subtitle">Share your improvement suggestion with the team</p>
        </div>

        <form id="ideaForm">
            <div class="form-group">
                <label class="form-label" for="ideaName">
                    Name your idea <span class="required">*</span>
                </label>
                <input
                        type="text"
                        id="ideaName"
                        name="ideaName"
                        class="form-input"
                        placeholder="Enter a clear, descriptive title for your idea"
                        required
                        maxlength="200"
                >
            </div>

            <div class="form-group">
                <label class="form-label" for="ideaDescription">
                    Describe your idea <span class="required">*</span>
                </label>
                <textarea
                        id="ideaDescription"
                        name="ideaDescription"
                        class="form-input form-textarea"
                        placeholder="Provide details about your improvement idea, including the problem it solves and how it would benefit the organization"
                        required
                        maxlength="2000"
                ></textarea>
            </div>

            <div class="form-group">
                <label class="form-label" for="ideaDomain">
                    Which domain does this belong to? <span class="required">*</span>
                </label>
                <select id="ideaDomain" name="ideaDomain" class="form-input form-select" required>
                    <option value="">Select a team...</option>
                    <option value="SSC">SSC</option>
                    <option value="ICT">ICT</option>
                    <option value="Consulting">CONSULTING</option>
                    <option value="Operations">OPS SUPPORT</option>
                    <option value="SC">SC</option>
                    <option value="T & E">T & E</option>
                    <option value="MSR">MSR</option>
                </select>
            </div>

            <div class="form-group">
                <label class="form-label" for="submitterName">
                    Your name <span class="required">*</span>
                </label>
                <input
                        type="text"
                        id="submitterName"
                        name="submitterName"
                        class="form-input"
                        placeholder="Enter your full name"
                        required
                        maxlength="100"
                >
            </div>

            <div class="form-group">
                <label class="form-label">
                    Attach file (optional)
                </label>
                <div class="file-upload-area" id="fileUploadArea">
                    <input type="file" id="fileInput" name="attachment" class="file-input" multiple accept=".pdf,.doc,.docx,.xls,.xlsx,.ppt,.pptx,.txt,.jpg,.jpeg,.png">
                    <div class="file-upload-icon">
                        <i class="fas fa-paperclip"></i>
                    </div>
                    <div class="file-upload-text">
                        Click to upload files or drag and drop<br>
                        <small>PDF, Word, Excel, PowerPoint, Images (Max 10MB each)</small>
                    </div>
                </div>
                <ul class="file-list" id="fileList"></ul>
            </div>

            <div class="form-actions">
                <button type="button" class="btn btn-secondary" onclick="goBack()">
                    <i class="fas fa-times"></i>
                    Cancel
                </button>
                <button type="submit" class="btn btn-primary" id="submitBtn">
                    <i class="fas fa-paper-plane"></i>
                    Submit
                </button>
            </div>
        </form>
    </div>
</div>

<script>
    // Theme Management - inherit from dashboard
    class ThemeManager {
        constructor() {
            this.currentTheme = localStorage.getItem('theme') || 'light';
            this.initTheme();
        }

        initTheme() {
            document.documentElement.setAttribute('data-theme', this.currentTheme);
        }
    }

    // Global variables
    let selectedFiles = [];
    // Replace with your actual Power Automate endpoint
    const POWER_AUTOMATE_ENDPOINT = 'https://prod-05.australiasoutheast.logic.azure.com:443/workflows/362497a64ee94acda35f09b62b21a95b/triggers/manual/paths/invoke?api-version=2016-06-01';

    // Initialize the page
    document.addEventListener('DOMContentLoaded', function() {
        // Initialize theme first
        new ThemeManager();

        initializeFileUpload();
        initializeForm();
    });

    // Initialize file upload functionality
    function initializeFileUpload() {
        const fileUploadArea = document.getElementById('fileUploadArea');
        const fileInput = document.getElementById('fileInput');
        const fileList = document.getElementById('fileList');

        fileUploadArea.addEventListener('dragover', (e) => {
            e.preventDefault();
            fileUploadArea.classList.add('dragover');
        });

        fileUploadArea.addEventListener('dragleave', () => {
            fileUploadArea.classList.remove('dragover');
        });

        fileUploadArea.addEventListener('drop', (e) => {
            e.preventDefault();
            fileUploadArea.classList.remove('dragover');
            const files = Array.from(e.dataTransfer.files);
            handleFileSelection(files);
        });

        fileInput.addEventListener('change', (e) => {
            const files = Array.from(e.target.files);
            handleFileSelection(files);
        });
    }

    // Handle file selection
    function handleFileSelection(files) {
        files.forEach(file => {
            if (file.size > 10 * 1024 * 1024) {
                showError(`File "${file.name}" is too large. Maximum size is 10MB.`);
                return;
            }

            if (selectedFiles.some(f => f.name === file.name && f.size === file.size)) {
                showError(`File "${file.name}" is already selected.`);
                return;
            }

            selectedFiles.push(file);
        });

        updateFileList();
    }

    // Update file list display
    function updateFileList() {
        const fileList = document.getElementById('fileList');
        fileList.innerHTML = '';

        selectedFiles.forEach((file, index) => {
            const li = document.createElement('li');
            li.className = 'file-item';
            li.innerHTML = `
                    <div class="file-item-info">
                        <i class="fas fa-file"></i>
                        <span>${file.name}</span>
                        <small>(${formatFileSize(file.size)})</small>
                    </div>
                    <button type="button" class="file-remove" onclick="removeFile(${index})">
                        <i class="fas fa-times"></i>
                    </button>
                `;
            fileList.appendChild(li);
        });
    }

    // Remove file from selection
    function removeFile(index) {
        selectedFiles.splice(index, 1);
        updateFileList();
    }

    // Format file size
    function formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB', 'GB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }

    // Initialize form functionality
    function initializeForm() {
        const form = document.getElementById('ideaForm');

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            await submitIdea();
        });

        const textarea = document.getElementById('ideaDescription');
        textarea.addEventListener('input', function() {
            this.style.height = 'auto';
            this.style.height = this.scrollHeight + 'px';
        });
    }

    // Submit idea to database
    async function submitIdea() {
        const submitBtn = document.getElementById('submitBtn');
        const form = document.getElementById('ideaForm');

        // Debug: Log form data before submission
        console.log('=== FORM SUBMISSION DEBUG ===');
        console.log('Form data being submitted:');
        console.log('- Title:', document.getElementById('ideaName').value.trim());
        console.log('- Description:', document.getElementById('ideaDescription').value.trim());
        console.log('- Domain:', document.getElementById('ideaDomain').value);
        console.log('- Submitter:', document.getElementById('submitterName').value.trim());
        console.log('- Files selected:', selectedFiles.length);
        console.log('- Current URL:', window.location.href);
        console.log('- Target endpoint:', '/api/ideas');

        // Validate form
        // if (!form.checkValidity()) {
        //     console.log('Form validation failed');
        //     form.reportValidity();
        //     return;
        // }

        // Show loading state
        submitBtn.disabled = true;
        submitBtn.innerHTML = '<div class="loading-spinner"></div> Submitting...';

        try {
            // Prepare form data (metadata only)
            const payload = {
                title: document.getElementById('ideaName').value.trim(),
                description: document.getElementById('ideaDescription').value.trim(),
                domain: document.getElementById('ideaDomain').value,
                submittedBy: document.getElementById('submitterName').value.trim(),
                dateSubmitted: new Date().toISOString(),
                path: ''
            };

            const response = await fetch('/api/ideas', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(payload)
            });

            // Debug: Log response details
            console.log('=== RESPONSE DEBUG ===');
            console.log('Response status:', response.status);
            console.log('Response status text:', response.statusText);
            console.log('Response headers:');
            response.headers.forEach((value, key) => {
                console.log(`- ${key}: ${value}`);
            });
            console.log('Response URL:', response.url);
            console.log('Response type:', response.type);
            console.log('Response ok:', response.ok);

            // Get response text first to see what we're actually receiving
            const responseText = await response.text();
            console.log('Raw response text:', responseText);
            console.log('Response text length:', responseText.length);
            console.log('Response text preview (first 200 chars):', responseText.substring(0, 200));

            // Check if response is HTML (common for 404 errors)
            if (responseText.trim().startsWith('<')) {
                console.error('PROBLEM: Response is HTML, not JSON');
                console.error('This usually means:');
                console.error('1. The endpoint /api/ideas does not exist');
                console.error('2. The server is returning a 404 page');
                console.error('3. There is a routing issue');
                console.error('4. The server is not configured to handle this endpoint');
                throw new Error('Server returned HTML instead of JSON. Check if /api/ideas endpoint exists.');
            }

            // Try to parse JSON only if we have valid JSON
            let result;
            try {
                result = JSON.parse(responseText);
                console.log('Parsed JSON result:', result);
            } catch (jsonError) {
                console.error('JSON parsing failed:', jsonError);
                console.error('Response was not valid JSON:', responseText);
                throw new Error(`Invalid JSON response: ${jsonError.message}`);
            }

            if (response.ok && result.success) {
                console.log('Success! Idea submitted with ID:', result.ideaId);
                const ideaId = result.ideaId;

                // Upload attachments to SharePoint if any
                if (selectedFiles.length > 0) {
                    console.log('Uploading attachments...');
                    await uploadAttachmentsToSharePoint(ideaId);
                }

                showSuccess();
                setTimeout(() => {
                    goBack();
                }, 2000);
            } else {
                console.error('API returned error:', result);
                throw new Error(result.error || 'Failed to submit idea');
            }

        } catch (error) {
            console.error('=== ERROR DETAILS ===');
            console.error('Error type:', error.constructor.name);
            console.error('Error message:', error.message);
            console.error('Error stack:', error.stack);

            // Show user-friendly error message
            let userMessage = error.message;
            if (error.message.includes('HTML instead of JSON')) {
                userMessage = 'The submission endpoint is not available. Please contact your administrator.';
            } else if (error.message.includes('Failed to fetch')) {
                userMessage = 'Network error. Please check your connection and try again.';
            }

            showError(userMessage);
        } finally {
            // Reset button state
            submitBtn.disabled = false;
            submitBtn.innerHTML = '<i class="fas fa-paper-plane"></i> Submit';
            console.log('=== FORM SUBMISSION END ===');
        }
    }

    // Upload attachments to SharePoint via Power Automate
    async function uploadAttachmentsToSharePoint(ideaId) {
        console.log('=== ATTACHMENT UPLOAD DEBUG ===');
        const errors = [];

        for (const file of selectedFiles) {
            try {
                console.log(`Uploading file: ${file.name} (${formatFileSize(file.size)})`);

                // Convert file to base64
                const base64Data = await toBase64(file);
                console.log('File converted to base64, length:', base64Data.length);

                // Prepare payload for Power Automate
                const payload = {
                    ideaId: ideaId,
                    fileName: file.name,
                    fileContent: base64Data.split(',')[1] // Remove data URL prefix
                };

                console.log('Sending to Power Automate:', POWER_AUTOMATE_ENDPOINT);
                console.log('Payload keys:', Object.keys(payload));

                // Send to Power Automate
                const response = await fetch(POWER_AUTOMATE_ENDPOINT, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(payload)
                });

                console.log('Power Automate response status:', response.status);

                if (!response.ok) {
                    const errorText = await response.text();
                    console.error('Power Automate error response:', errorText);
                    throw new Error(`HTTP ${response.status}: ${errorText}`);
                }

                console.log('File uploaded successfully:', file.name);
            } catch (error) {
                console.error(`Error uploading file ${file.name}:`, error);
                errors.push(`File ${file.name}: ${error.message}`);
            }
        }

        if (errors.length > 0) {
            console.error('Some attachment uploads failed:', errors);
            showError('Idea submitted but some attachments failed: ' + errors.join(', '));
        }
    }

    // Convert file to base64
    function toBase64(file) {
        return new Promise((resolve, reject) => {
            const reader = new FileReader();
            reader.readAsDataURL(file);
            reader.onload = () => resolve(reader.result);
            reader.onerror = error => reject(error);
        });
    }

    // Show success message
    function showSuccess() {
        hideMessages();
        const successMessage = document.getElementById('successMessage');
        successMessage.classList.add('show');
        successMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    // Show error message
    function showError(message) {
        hideMessages();
        const errorMessage = document.getElementById('errorMessage');
        const errorText = document.getElementById('errorText');
        errorText.textContent = message;
        errorMessage.classList.add('show');
        errorMessage.scrollIntoView({ behavior: 'smooth', block: 'center' });
    }

    // Hide all messages
    function hideMessages() {
        document.getElementById('successMessage').classList.remove('show');
        document.getElementById('errorMessage').classList.remove('show');
    }

    // Go back to previous page
    function goBack() {
        // Check if there's a referrer, otherwise go to dashboard
        if (document.referrer && document.referrer.includes(window.location.origin)) {
            window.history.back();
        } else {
            window.location.href = '/dashboard';
        }
    }
</script>
</body>
</html>