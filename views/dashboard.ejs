<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Idea Management Dashboard</title>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background-color: #f8f9fa;
            color: #333333;
            overflow-x: hidden;
        }

        .header {
            background-color: #f8f9fa;
            padding: 12px 20px;
            border-bottom: 1px solid #e9ecef;
            display: flex;
            align-items: center;
            justify-content: space-between;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
            margin-left: 200px;
        }

        .logo-section {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .breadcrumb {
            display: flex;
            align-items: center;
            gap: 8px;
            font-size: 14px;
            color: #6c757d;
        }

        .board-title {
            font-size: 16px;
            font-weight: 600;
            color: #333333;
        }

        .header-controls {
            display: flex;
            align-items: center;
            gap: 15px;
        }

        .search-header {
            position: relative;
        }

        .search-header input {
            background-color: #ffffff;
            border: 1px solid #ced4da;
            border-radius: 6px;
            padding: 8px 12px 8px 35px;
            color: #333333;
            font-size: 14px;
            width: 300px;
        }

        .search-header input::placeholder {
            color: #6c757d;
        }

        .search-header input:focus {
            outline: none;
            border-color: #ff6b35;
            box-shadow: 0 0 0 2px rgba(255, 107, 53, 0.2);
        }

        .search-icon {
            position: absolute;
            left: 10px;
            top: 50%;
            transform: translateY(-50%);
            color: #6c757d;
            font-size: 16px;
        }

        .view-controls {
            display: flex;
            align-items: center;
            gap: 10px;
            font-size: 12px;
            color: #6c757d;
        }

        .total-count {
            color: #6c757d;
            font-size: 14px;
        }

        .container {
            display: flex;
            min-height: calc(100vh - 60px);
        }

        /* Enhanced Sidebar */
        .sidebar {
            width: 200px;
            background-color: #f8f9fa;
            border-right: 1px solid #e9ecef;
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            padding: 20px 0;
            overflow-y: auto;
        }

        /* Logo section in sidebar */
        .sidebar-logo {
            padding: 0 15px 25px;
            font-size: 18px;
            font-weight: 700;
            color: #333333;
            border-bottom: 1px solid #e9ecef;
            margin-bottom: 25px;
            display: flex;
            align-items: center;
            gap: 10px;
        }

        .sidebar-logo-icon {
            width: 32px;
            height: 32px;
            background: linear-gradient(45deg, #ff6b35 0%, #ff8c42 100%);
            border-radius: 6px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-weight: bold;
            font-size: 14px;
        }
        /* Menu sections */
        .menu-section {
            margin-bottom: 30px;
        }

        .menu-title {
            text-transform: uppercase;
            font-size: 11px;
            padding: 0 15px 10px;
            font-weight: 600;
            letter-spacing: 0.5px;
            color: #6c757d;
        }

        .nav-menu {
            padding: 0;
        }

        .nav-item {
            display: flex;
            align-items: center;
            padding: 12px 15px;
            color: #6c757d;
            text-decoration: none;
            font-size: 14px;
            margin: 2px 8px;
            border-radius: 6px;
            transition: all 0.3s ease;
            position: relative;
            cursor: pointer;
        }

        .nav-item:hover {
            background-color: #f0f2f5;
            color: #333333;
            transform: translateX(3px);
        }

        .nav-item.active {
            background-color: #ff6b35;
            color: white;
            box-shadow: 0 2px 8px rgba(255, 107, 53, 0.3);
        }

        .nav-item.active::before {
            content: '';
            position: absolute;
            left: -8px;
            top: 50%;
            transform: translateY(-50%);
            width: 4px;
            height: 20px;
            background-color: #ff6b35;
            border-radius: 0 2px 2px 0;
        }

        .nav-icon {
            width: 16px;
            height: 16px;
            margin-right: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 14px;
        }

        .nav-item i {
            width: 16px;
            margin-right: 12px;
            text-align: center;
            font-size: 14px;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            margin-left: 200px;
            padding: 20px;
            overflow: auto;
            background-color: #ffffff;
        }

        /* Dashboard Grid */
        .dashboard-grid {
            display: grid;
            grid-template-columns: 2fr 1fr;
            gap: 20px;
            margin-bottom: 20px;
        }

        /* Idea Summary */
        .Idea-summary {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 15px;
            grid-column: 1 / -1;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            border: 1px solid #e9ecef;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }
        .summary-content {
            flex: 1;
        }

        .summary-title {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin-bottom: 10px;
        }

        .summary-text {
            font-size: 14px;
            color: #6c757d;
            line-height: 1.5;
        }

        .create-Idea-btn {
            background: linear-gradient(45deg, #ff6b35 0%, #e64626 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-weight: 600;
            font-size: 14px;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 8px;
            box-shadow: 0 2px 8px rgba(255, 107, 53, 0.2);
        }

        .create-Idea-btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 4px 12px rgba(255, 107, 53, 0.3);
        }

        .create-Idea-btn:active {
            transform: translateY(0);
        }

        /* Idea States */
        .Idea-states {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin-bottom: 20px;
            height: 33vh;
        }

        .state-card {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            justify-content: center;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            border: 1px solid #e9ecef;
            position: relative;
        }

        .state-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 10px;
            color: #333;
        }

        .state-count {
            font-size: 28px;
            font-weight: 700;
            margin-bottom: 10px;
        }

        .state-count.new { color: #ff6b35; }
        .state-count.in-progress { color: #ff6b35; }
        .state-count.completed { color: #e64626; }

        .chart-container {
            width: 150px;
            height: 150px;
            margin: 0 auto;
        }

        /* New Gantt Chart Styles */
        .gantt-title {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 15px;
            grid-column: 1 / -1;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            border: 1px solid #e9ecef;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: flex-start;
        }
        .gantt-header {
            font-size: 18px;
            font-weight: 600;
            color: #333;
            margin-bottom: 10px;
        }

        .gantt-header-row {
            display: flex;
            margin-left: 200px;
            border-bottom: 1px solid #e5e7eb;
            background-color: white;
        }

        .gantt-month {
            flex-grow: 1;
            padding: 4px;
            text-align: center;
            border-right: 1px solid #e5e7eb;
            font-size: 12px;
        }

        .gantt-rows {
            display: grid;
            grid-template-columns: 200px 1fr;
            gap: 12px;
            width: 100%;
            background-color: white;
            padding: 16px;
            border-radius: 8px;
            overflow-x: auto;
            max-width: 100%;
        }

        .gantt-task-name {
            text-align: right;
            padding-right: 8px;
            line-height: 30px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
            background-color: white;
        }

        .gantt-bar-container {
            position: relative;
            background: #f0f0f0;
            height: 30px;
            overflow: hidden;
        }

        .gantt-bar {
            height: 20px;
            margin-top: 5px;
            border-radius: 4px;
            position: absolute;
            background: linear-gradient(90deg, #ff6b35 0%, #e64626 100%);
            transition: all 0.2s ease-in-out;
        }

        .gantt-progress {
            height: 100%;
            background: transparent; /* Remove the gradient from progress to avoid duplication */
            border-radius: 4px 0 0 4px;
        }

        /* Right Column */
        .right-column {
            display: flex;
            flex-direction: column;
            gap: 20px;
        }

        /* Overview Cards */
        .overview-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 15px;
            margin-bottom: 20px;
        }

        .overview-item {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 15px;
            border: 1px solid #e9ecef;
            text-align: center;
            cursor: pointer;
            transition: all 0.3s ease;
            display: flex;
            align-items: center;
            gap: 15px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.03);
        }

        .overview-item:hover {
            transform: translateY(-3px);
            box-shadow: 0 4px 12px rgba(0,0,0,0.08);
        }

        .overview-icon {
            width: 40px;
            height: 40px;
            background: linear-gradient(45deg, #ff6b35 0%, #e64626 100%);
            border-radius: 10px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 18px;
        }

        .overview-label {
            font-size: 14px;
            font-weight: 500;
            color: #333333;
            text-align: left;
            flex: 1;
        }

        /* Journey Stepper Styles */
        .journey-container {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 24px;
            border: 1px solid #e9ecef;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
            overflow-y: auto;
            flex: 1;
            height: auto;
            min-height: 400px;
        }

        .journey-title {
            font-size: 20px;
            font-weight: 600;
            color: #E64626;
            text-align: center;
            margin-bottom: 24px;
        }

        .step-container {
            display: flex;
            align-items: flex-start;
            gap: 12px;
            margin-bottom: 16px;
            cursor: pointer;
            transition: transform 0.2s ease-in-out;
        }

        .step-container:hover {
            transform: translateX(4px);
        }

        .step-icon-line {
            display: flex;
            flex-direction: column;
            align-items: center;
        }

        .step-icon {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 16px;
            transition: all 0.2s ease-in-out;
        }

        .step-icon.active {
            background-color: #E64626;
            color: white;
        }

        .step-icon.inactive {
            background-color: #f0f0f0;
            color: #666;
        }

        .step-line {
            width: 2px;
            height: 32px;
            margin-top: 8px;
            transition: background-color 0.2s ease-in-out;
        }

        .step-line.active {
            background-color: #E64626;
        }

        .step-line.inactive {
            background-color: #f0f0f0;
        }

        .step-content {
            flex: 1;
        }

        .step-title {
            font-size: 16px;
            font-weight: 600;
            margin-bottom: 4px;
            transition: color 0.2s ease-in-out;
        }

        .step-title.active {
            color: #E64626;
        }

        .step-title.inactive {
            color: #666;
        }

        .step-description {
            font-size: 14px;
            color: #666;
            line-height: 1.4;
            opacity: 1;
            max-height: 100px;
            overflow: hidden;
            transition: all 0.3s ease-in-out;
        }

        .step-description.hidden {
            opacity: 0;
            max-height: 0;
        }

        .journey-note {
            background-color: #f5f5f5;
            padding: 16px;
            border-radius: 4px;
            margin-top: 24px;
            display: flex;
            align-items: flex-start;
            gap: 8px;
        }

        .journey-note i {
            color: #E64626;
            margin-top: 4px;
        }

        .journey-note-text {
            font-size: 14px;
            color: #333;
            line-height: 1.4;
        }

        /* Today's Tasks */
        .tasks-container {
            background-color: #ffffff;
            border-radius: 10px;
            padding: 20px;
            border: 1px solid #e9ecef;
            box-shadow: 0 2px 8px rgba(0,0,0,0.05);
        }

        .task-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .task-date {
            font-size: 14px;
            color: #6c757d;
        }

        .task-item {
            padding: 15px;
            border-radius: 8px;
            border: 1px solid #e9ecef;
            margin-bottom: 12px;
            cursor: pointer;
            transition: all 0.2s ease;
            background-color: #f8f9fa;
        }

        .task-item:hover {
            border-color: #ff6b35;
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(0,0,0,0.05);
        }

        .task-title {
            font-weight: 600;
            margin-bottom: 8px;
            color: #333333;
        }

        .task-Idea {
            font-size: 14px;
            color: #6c757d;
        }

        .task-priority {
            display: inline-block;
            padding: 3px 8px;
            border-radius: 4px;
            font-size: 12px;
            margin-top: 8px;
        }

        .priority-high {
            background-color: rgba(255, 107, 53, 0.1);
            color: #ff6b35;
        }

        /* Loading state */
        .loading {
            display: flex;
            align-items: center;
            justify-content: center;
            color: #6c757d;
            font-style: italic;
        }

        /* Responsive */
        @media (max-width: 1200px) {
            .dashboard-grid {
                grid-template-columns: 1fr;
            }

            .Idea-states {
                grid-template-columns: 1fr;
                height: auto;
            }
        }

        @media (max-width: 768px) {
            .sidebar {
                width: 70px;
            }

            .sidebar-logo span {
                display: none;
            }

            .menu-title {
                display: none;
            }

            .nav-item span {
                display: none;
            }

            .nav-item {
                justify-content: center;
                padding: 15px;
                margin: 2px 5px;
            }

            .nav-item i {
                margin-right: 0;
                font-size: 16px;
            }

            .header {
                margin-left: 70px;
            }

            .main-content {
                margin-left: 70px;
            }

            .debug-info {
                margin-left: 90px;
            }

            .board-container {
                flex-direction: column;
            }

            .column {
                min-width: auto;
            }

            .header-controls {
                flex-direction: column;
                gap: 10px;
            }

            .search-header input {
                width: 200px;
            }
        }
        @media (max-width: 768px) {
            .gantt-header-row {
                margin-left: 70px;
            }
        }
    </style>
</head>
<body>
<!-- Sidebar -->
<div class="sidebar">
    <div class="sidebar-logo">
        <div class="sidebar-logo-icon">SSC</div>
        <span>Continuous Improvement</span>
    </div>

    <div class="menu-section">
        <div class="menu-title">Main Menu</div>
        <nav class="nav-menu">
            <a href="#" class="nav-item active">
                <i class="fas fa-th-large"></i>
                <span>Dashboard</span>
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-lightbulb"></i>
                <span>My Ideas</span>
            </a>
            <a href="/index" class="nav-item">
                <i class="fas fa-columns"></i>
                <span>All Ideas</span>
            </a>
            <a href="/report" class="nav-item">
                <i class="fas fa-chart-line"></i>
                <span>Reports</span>
            </a>
        </nav>
    </div>

    <div class="menu-section">
        <div class="menu-title">Ideas</div>
        <nav class="nav-menu">
            <a href="#" class="nav-item">
                <i class="fas fa-folder-open"></i>
                <span>Ideas</span>
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-book"></i>
                <span>Knowledge Base</span>
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-users"></i>
                <span>Teams</span>
            </a>
        </nav>
    </div>

    <div class="menu-section">
        <div class="menu-title">Tools</div>
        <nav class="nav-menu">
            <a href="#" class="nav-item">
                <i class="fas fa-plus-circle"></i>
                <span>Add New Idea</span>
            </a>
            <a href="#" class="nav-item">
                <i class="fas fa-cog"></i>
                <span>Settings</span>
            </a>
        </nav>
    </div>
</div>

<!-- Header -->
<div class="header">
    <div class="logo-section">
        <div class="breadcrumb">
            <span>Dashboard</span>
            <i class="fas fa-chevron-right"></i>
        </div>
        <div class="board-title">Ideas Dashboard</div>
    </div>

    <div class="header-controls">
        <div class="search-header">
            <i class="fas fa-search search-icon"></i>
            <input type="text" id="searchInput" placeholder="Filter ideas on the board">
        </div>
        <div class="view-controls">
            <span class="total-count" id="totalCount">Loading...</span>
            <button id="refreshBtn" style="background: #28a745; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; margin-left: 10px;">
                <i class="fas fa-sync-alt"></i> Refresh
            </button>
            <button id="debugBtn" style="background: #6c757d; color: white; border: none; padding: 6px 10px; border-radius: 4px; cursor: pointer; margin-left: 5px;">
                <i class="fas fa-bug"></i> Debug
            </button>
            <i class="fas fa-chart-bar"></i>
        </div>
    </div>
</div>

<!-- Main Content -->
<div class="main-content">
    <!-- Idea Summary -->
    <div class="Idea-summary">
        <div class="summary-content">
            <div class="summary-title">Idea Summary</div>
            <div class="summary-text">Add new Idea and manage all Ideas in one place.</div>
        </div>
        <button class="create-Idea-btn">
            <i class="fas fa-plus"></i>
            Create Idea
        </button>
    </div>

    <!-- Dashboard Grid -->
    <div class="dashboard-grid">
        <!-- Left Column (2/3 width) -->
        <div class="left-column">
            <!-- Idea States with Donut Charts -->
            <div class="Idea-states">
                <div class="state-card">
                    <div class="state-title">New Ideas</div>
                    <div class="state-count new" id="newIdeasCount">0</div>
                    <div class="chart-container">
                        <canvas id="newChart"></canvas>
                    </div>
                </div>

                <div class="state-card">
                    <div class="state-title">In Progress</div>
                    <div class="state-count in-progress" id="inProgressCount">0</div>
                    <div class="chart-container">
                        <canvas id="progressChart"></canvas>
                    </div>
                </div>

                <div class="state-card">
                    <div class="state-title">Completed</div>
                    <div class="state-count completed" id="completedCount">0</div>
                    <div class="chart-container">
                        <canvas id="completedChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Gantt Chart Implementation -->
            <div class="gantt-container">
                <div class="gantt-header">
                    <div class="gantt-title">Top Priority Ideas</div>
                </div>

                <!-- Month Header -->
                <div class="gantt-header-row" id="ganttMonthHeader">
                    <div class="loading">Loading timeline...</div>
                </div>

                <!-- Gantt Rows -->
                <div class="gantt-rows" id="ganttRows">
                    <div class="loading">Loading top priority ideas...</div>
                </div>
            </div>
        </div>

        <!-- Right Column (1/3 width) -->
        <div class="right-column">
            <!-- Journey Container -->
            <div class="journey-container">
                <div class="journey-title">Your Improvement Journey</div>

                <div class="step-container" data-step="0">
                    <div class="step-icon-line">
                        <div class="step-icon active">
                            <i class="fas fa-bullseye"></i>
                        </div>
                        <div class="step-line active"></div>
                    </div>
                    <div class="step-content">
                        <div class="step-title active">1. New Submission</div>
                        <div class="step-description">Share your improvement ideas here!</div>
                    </div>
                </div>

                <div class="step-container" data-step="1">
                    <div class="step-icon-line">
                        <div class="step-icon inactive">
                            <i class="fas fa-clock"></i>
                        </div>
                        <div class="step-line inactive"></div>
                    </div>
                    <div class="step-content">
                        <div class="step-title inactive">2. Prioritisation</div>
                        <div class="step-description hidden">Ideas are reviewed and prioritized quarterly.</div>
                    </div>
                </div>

                <div class="step-container" data-step="2">
                    <div class="step-icon-line">
                        <div class="step-icon inactive">
                            <i class="fas fa-cogs"></i>
                        </div>
                        <div class="step-line inactive"></div>
                    </div>
                    <div class="step-content">
                        <div class="step-title inactive">3. Scoping</div>
                        <div class="step-description hidden">Planning the implementation details.</div>
                    </div>
                </div>

                <div class="step-container" data-step="3">
                    <div class="step-icon-line">
                        <div class="step-icon inactive">
                            <i class="fas fa-forward"></i>
                        </div>
                        <div class="step-line inactive"></div>
                    </div>
                    <div class="step-content">
                        <div class="step-title inactive">4. In Progress</div>
                        <div class="step-description hidden">Your improvement is being implemented.</div>
                    </div>
                </div>

                <div class="step-container" data-step="4">
                    <div class="step-icon-line">
                        <div class="step-icon inactive">
                            <i class="fas fa-sync-alt"></i>
                        </div>
                        <div class="step-line inactive"></div>
                    </div>
                    <div class="step-content">
                        <div class="step-title inactive">5. Operational</div>
                        <div class="step-description hidden">The improvement is live and being monitored.</div>
                    </div>
                </div>

                <div class="step-container" data-step="5">
                    <div class="step-icon-line">
                        <div class="step-icon inactive">
                            <i class="fas fa-check"></i>
                        </div>
                    </div>
                    <div class="step-content">
                        <div class="step-title inactive">6. Completed</div>
                        <div class="step-description hidden">Successfully implemented and verified!</div>
                    </div>
                </div>

                <div class="journey-note">
                    <i class="fas fa-pause"></i>
                    <div class="journey-note-text">Note: Improvements may be paused if they need additional input or review.</div>
                </div>
            </div>

            <!-- Overview Items -->
            <div class="overview-grid">
                <div class="overview-item">
                    <div class="overview-icon">
                        <i class="fas fa-project-diagram"></i>
                    </div>
                    <div class="overview-label">Ideas</div>
                </div>
                <div class="overview-item">
                    <div class="overview-icon">
                        <i class="fas fa-chart-line"></i>
                    </div>
                    <div class="overview-label">Activity</div>
                </div>
                <div class="overview-item">
                    <div class="overview-icon">
                        <i class="fas fa-comments"></i>
                    </div>
                    <div class="overview-label">Messages</div>
                </div>
                <div class="overview-item">
                    <div class="overview-icon">
                        <i class="fas fa-users"></i>
                    </div>
                    <div class="overview-label">Members</div>
                </div>
                <div class="overview-item">
                    <div class="overview-icon">
                        <i class="fas fa-calendar"></i>
                    </div>
                    <div class="overview-label">Calendar</div>
                </div>
            </div>

            <!-- Today's Tasks -->
            <div class="tasks-container">
                <div class="task-header">
                    <div class="gantt-title">Recent Ideas</div>
                    <div class="task-date" id="currentDate">Loading...</div>
                </div>

                <div id="recentIdeasContainer">
                    <div class="loading">Loading recent ideas...</div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    // Global variables
    let allData = [];
    let dashboardData = {
        totalIdeas: 0,
        newIdeas: 0,
        inProgressIdeas: 0,
        completedIdeas: 0,
        topPriorityIdeas: [],
        recentIdeas: []
    };

    class SidebarManager {
        constructor() {
            this.initSidebarEvents();
        }

        initSidebarEvents() {
            const menuItems = document.querySelectorAll('.nav-item');
            menuItems.forEach(item => {
                item.addEventListener('click', (e) => {
                    if (item.getAttribute('href') === '#') {
                        e.preventDefault();
                    }

                    menuItems.forEach(i => i.classList.remove('active'));
                    item.classList.add('active');
                    this.createRippleEffect(item, e);
                });

                item.addEventListener('mouseenter', () => {
                    if (!item.classList.contains('active')) {
                        item.style.transform = 'translateX(3px)';
                    }
                });

                item.addEventListener('mouseleave', () => {
                    if (!item.classList.contains('active')) {
                        item.style.transform = 'translateX(0)';
                    }
                });
            });
        }

        createRippleEffect(element, event) {
            const rect = element.getBoundingClientRect();
            const size = 60;
            const x = event.clientX - rect.left - size / 2;
            const y = event.clientY - rect.top - size / 2;

            const ripple = document.createElement('span');
            ripple.style.cssText = `
                position: absolute;
                width: ${size}px;
                height: ${size}px;
                background: rgba(255, 255, 255, 0.2);
                border-radius: 50%;
                left: ${x}px;
                top: ${y}px;
                pointer-events: none;
                transform: scale(0);
                animation: ripple 0.6s ease-out;
            `;

            if (!document.querySelector('#ripple-styles')) {
                const style = document.createElement('style');
                style.id = 'ripple-styles';
                style.textContent = `
                    @keyframes ripple {
                        to {
                            transform: scale(2);
                            opacity: 0;
                        }
                    }
                `;
                document.head.appendChild(style);
            }

            element.style.position = 'relative';
            element.style.overflow = 'hidden';
            element.appendChild(ripple);

            setTimeout(() => {
                ripple.remove();
            }, 600);
        }
    }

    class JourneyStepper {
        constructor() {
            this.activeStep = 0;
            this.initStepperEvents();
        }

        initStepperEvents() {
            const stepContainers = document.querySelectorAll('.step-container');
            stepContainers.forEach((container, index) => {
                container.addEventListener('click', () => {
                    this.setActiveStep(index);
                });
            });
        }

        setActiveStep(stepIndex) {
            this.activeStep = stepIndex;
            this.updateStepVisualStates();
        }

        updateStepVisualStates() {
            const stepContainers = document.querySelectorAll('.step-container');

            stepContainers.forEach((container, index) => {
                const icon = container.querySelector('.step-icon');
                const line = container.querySelector('.step-line');
                const title = container.querySelector('.step-title');
                const description = container.querySelector('.step-description');

                if (index <= this.activeStep) {
                    icon.classList.remove('inactive');
                    icon.classList.add('active');
                    title.classList.remove('inactive');
                    title.classList.add('active');
                    description.classList.remove('hidden');

                    if (line) {
                        line.classList.remove('inactive');
                        line.classList.add('active');
                    }
                } else {
                    icon.classList.remove('active');
                    icon.classList.add('inactive');
                    title.classList.remove('active');
                    title.classList.add('inactive');
                    description.classList.add('hidden');

                    if (line) {
                        line.classList.remove('active');
                        line.classList.add('inactive');
                    }
                }
            });
        }
    }

    // Load data from database (same as index.html)
    async function loadDashboardData() {
        try {
            console.log('🚀 Loading dashboard data from database...');

            // Check database connection
            const statusResponse = await fetch('/api/db-status');
            const statusData = await statusResponse.json();

            if (!statusData.connected) {
                throw new Error('Database not connected: ' + (statusData.error || 'Unknown error'));
            }

            console.log('✅ Database connection verified');

            // Load all ideas from database
            const response = await fetch('/api/ideas');
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }

            const apiData = await response.json();
            if (!apiData.success) {
                throw new Error('API error: ' + (apiData.error || 'Unknown error'));
            }

            console.log('✅ Database data loaded successfully');
            console.log(`📊 Retrieved ${apiData.data.length} records from database`);

            // Transform and process data
            allData = transformDatabaseData(apiData.data);
            processDashboardData();
            renderDashboard();

        } catch (error) {
            console.error('❌ Database loading error:', error);
            loadSampleDashboardData(); // Fallback to sample data
        }
    }

    // Transform database data (same as index.html)
    function transformDatabaseData(dbData) {
        console.log('🔄 Transforming database data:', dbData.length, 'records');

        return dbData.map((item, index) => {
            const transformed = {};

            transformed.ID = item.ID || index + 1;
            transformed.Title = item.Title || 'Untitled';
            transformed.Description = item.Idea || item.Description || '';
            transformed.Status = item.State || item.Status || 'New';
            transformed.Domain = item.Team || item.Domain || 'General';
            transformed.SubmittedBy = item.SubmittedBy || 'Unknown';
            transformed.LeadOwner = item.LeadOwner || item.Lead || 'Unassigned';

            transformed.Operational = interpretBooleanValue(item.Operational);
            transformed.Closed = interpretBooleanValue(item.Closed);

            transformed.DateSubmitted = item.Date || item.DateSubmitted;
            transformed.ExpectedCompletion = item.ExpectedCompletion;
            transformed.ActualCompletion = item.Closed_Date || item.ActualCompletion;

            transformed.isComplete = transformed.Closed || (transformed.Status && transformed.Status.toLowerCase().includes('complet'));
            transformed.isInProgress = transformed.Status && transformed.Status.toLowerCase().includes('progress');

            const isTop5Priority = interpretBooleanValue(item.isTop6);
            transformed.Top5 = isTop5Priority && !transformed.isComplete;
            transformed.isTop5 = transformed.Top5;

            transformed.Notes = item.Notes || '';
            transformed.PowerAppsId = item.PowerAppsId || '';
            transformed.Duration = 0;

            return transformed;
        }).filter(item => item.ID && item.Title);
    }

    function interpretBooleanValue(value) {
        if (value === null || value === undefined) return false;
        const str = value.toString().toLowerCase().trim();
        return str === 'true' || str === '1' || str === 'yes' || str === 'y' ||
            str === 'top5' || str === 'high' || str === 'priority';
    }

    // Process data for dashboard
    function processDashboardData() {
        dashboardData.totalIdeas = allData.length;

        // Count by status
        dashboardData.newIdeas = allData.filter(item =>
            item.Status && item.Status.toLowerCase().includes('new')
        ).length;

        dashboardData.inProgressIdeas = allData.filter(item =>
            item.Status && (item.Status.toLowerCase().includes('progress') ||
                item.Status.toLowerCase().includes('scop') ||
                item.Status.toLowerCase().includes('prioriti'))
        ).length;

        dashboardData.completedIdeas = allData.filter(item =>
            item.Status && (item.Status.toLowerCase().includes('complet') ||
                item.Status.toLowerCase().includes('operational'))
        ).length;

        // Get top priority ideas (limit to 5 for gantt chart)
        dashboardData.topPriorityIdeas = allData
            .filter(item => item.Top5 || item.isTop5)
            .slice(0, 5);

        // Get recent ideas (last 3)
        dashboardData.recentIdeas = allData
            .sort((a, b) => new Date(b.DateSubmitted || 0) - new Date(a.DateSubmitted || 0))
            .slice(0, 3);

        console.log('📊 Dashboard data processed:', dashboardData);
    }

    // Render dashboard
    function renderDashboard() {
        // Update counts
        document.getElementById('newIdeasCount').textContent = dashboardData.newIdeas;
        document.getElementById('inProgressCount').textContent = dashboardData.inProgressIdeas;
        document.getElementById('completedCount').textContent = dashboardData.completedIdeas;
        document.getElementById('totalCount').textContent = `${dashboardData.totalIdeas} ideas`;

        // Render charts
        renderCharts();

        // Render gantt chart
        renderGanttChart();

        // Render recent ideas
        renderRecentIdeas();

        // Update current date
        document.getElementById('currentDate').textContent = new Date().toLocaleDateString('en-AU', {
            weekday: 'short',
            day: 'numeric',
            month: 'long',
            year: 'numeric'
        });
    }

    // Render donut charts
    function renderCharts() {
        // New Ideas Chart
        const newCtx = document.getElementById('newChart').getContext('2d');
        new Chart(newCtx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: [dashboardData.newIdeas, dashboardData.totalIdeas - dashboardData.newIdeas],
                    backgroundColor: ['#ff6b35', '#e9ecef'],
                    borderWidth: 0
                }]
            },
            options: {
                cutout: '70%',
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: { display: false },
                    tooltip: { enabled: false }
                }
            }
        });

        // In Progress Chart
        const progressCtx = document.getElementById('progressChart').getContext('2d');
        new Chart(progressCtx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: [dashboardData.inProgressIdeas, dashboardData.totalIdeas - dashboardData.inProgressIdeas],
                    backgroundColor: ['#fd552f', '#e9ecef'],
                    borderWidth: 0
                }]
            },
            options: {
                cutout: '70%',
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: { display: false },
                    tooltip: { enabled: false }
                }
            }
        });

        // Completed Chart
        const completedCtx = document.getElementById('completedChart').getContext('2d');
        new Chart(completedCtx, {
            type: 'doughnut',
            data: {
                datasets: [{
                    data: [dashboardData.completedIdeas, dashboardData.totalIdeas - dashboardData.completedIdeas],
                    backgroundColor: ['#e64626', '#e9ecef'],
                    borderWidth: 0
                }]
            },
            options: {
                cutout: '70%',
                responsive: true,
                maintainAspectRatio: true,
                plugins: {
                    legend: { display: false },
                    tooltip: { enabled: false }
                }
            }
        });
    }

    // Render gantt chart with top priority ideas
    function renderGanttChart() {
        const ganttRows = document.getElementById('ganttRows');
        const ganttMonthHeader = document.getElementById('ganttMonthHeader');

        if (dashboardData.topPriorityIdeas.length === 0) {
            ganttRows.innerHTML = '<div class="loading">No top priority ideas found</div>';
            ganttMonthHeader.innerHTML = '<div class="loading">No timeline data</div>';
            return;
        }

        // Calculate timeline based on actual dates
        const timeline = calculateGanttTimeline(dashboardData.topPriorityIdeas);

        // Render month headers
        renderGanttMonthHeaders(ganttMonthHeader, timeline);

        // Clear and render gantt rows
        ganttRows.innerHTML = '';

        dashboardData.topPriorityIdeas.forEach((idea, index) => {
            // Calculate actual position and duration based on dates
            const barData = calculateBarPosition(idea, timeline);

            // Create task name element
            const taskName = document.createElement('div');
            taskName.className = 'gantt-task-name';
            taskName.textContent = idea.Title.length > 25 ? idea.Title.substring(0, 25) + '...' : idea.Title;
            taskName.title = `${idea.Title} (ID: ${idea.ID})`;

            // Create bar container
            const barContainer = document.createElement('div');
            barContainer.className = 'gantt-bar-container';

            // Create bar with actual positioning
            const bar = document.createElement('div');
            bar.className = 'gantt-bar';
            bar.style.left = `${barData.left}%`;
            bar.style.width = `${barData.width}%`;
            bar.title = `${idea.Title}\nStart: ${barData.startDate}\nDuration: ${barData.durationText}`;

            // Create progress bar
            const progressBar = document.createElement('div');
            progressBar.className = 'gantt-progress';
            progressBar.style.width = `${barData.progress}%`;

            bar.appendChild(progressBar);
            barContainer.appendChild(bar);

            ganttRows.appendChild(taskName);
            ganttRows.appendChild(barContainer);
        });
    }

    // Calculate timeline span for gantt chart
    function calculateGanttTimeline(ideas) {
        const now = new Date();
        const dates = [];

        // Collect all relevant dates
        ideas.forEach(idea => {
            const startDate = idea.DateSubmitted ? new Date(idea.DateSubmitted) : now;
            const endDate = idea.ExpectedCompletion ? new Date(idea.ExpectedCompletion) :
                idea.ActualCompletion ? new Date(idea.ActualCompletion) :
                    new Date(startDate.getTime() + (90 * 24 * 60 * 60 * 1000)); // Default 3 months

            dates.push(startDate, endDate);
        });

        // Add current date
        dates.push(now);

        // Find min and max dates
        const minDate = new Date(Math.min(...dates));
        const maxDate = new Date(Math.max(...dates));

        // Extend the range slightly for better visualization
        const timelineStart = new Date(minDate.getFullYear(), minDate.getMonth() - 1, 1);
        const timelineEnd = new Date(maxDate.getFullYear(), maxDate.getMonth() + 2, 0);

        // Generate month list
        const months = [];
        let currentDate = new Date(timelineStart);

        while (currentDate <= timelineEnd) {
            months.push({
                year: currentDate.getFullYear(),
                month: currentDate.getMonth(),
                label: currentDate.toLocaleDateString('en-US', { month: 'short', year: '2-digit' }),
                date: new Date(currentDate)
            });
            currentDate.setMonth(currentDate.getMonth() + 1);
        }

        return {
            start: timelineStart,
            end: timelineEnd,
            months: months,
            totalDays: Math.ceil((timelineEnd - timelineStart) / (24 * 60 * 60 * 1000))
        };
    }

    // Render month headers for gantt chart
    function renderGanttMonthHeaders(container, timeline) {
        container.innerHTML = '';

        timeline.months.forEach(month => {
            const monthDiv = document.createElement('div');
            monthDiv.className = 'gantt-month';
            monthDiv.textContent = month.label;
            monthDiv.title = `${month.date.toLocaleDateString('en-US', { month: 'long', year: 'numeric' })}`;
            container.appendChild(monthDiv);
        });
    }

    // Calculate bar position based on actual dates
    function calculateBarPosition(idea, timeline) {
        // Parse dates
        const startDate = idea.DateSubmitted ? new Date(idea.DateSubmitted) : timeline.start;

        // Determine end date logic
        let endDate;
        let hasDefiniteEnd = false;

        if (idea.ExpectedCompletion) {
            endDate = new Date(idea.ExpectedCompletion);
            hasDefiniteEnd = true;
        } else if (idea.ActualCompletion) {
            endDate = new Date(idea.ActualCompletion);
            hasDefiniteEnd = true;
        } else {
            // No completion date - extend to end of timeline
            endDate = timeline.end;
            hasDefiniteEnd = false;
        }

        // Calculate position as percentage of timeline
        const startOffset = Math.max(0, (startDate - timeline.start) / (timeline.end - timeline.start) * 100);
        const endOffset = Math.min(100, (endDate - timeline.start) / (timeline.end - timeline.start) * 100);
        const width = Math.max(2, endOffset - startOffset); // Minimum 2% width for visibility

        // Calculate progress based on current date and status
        let progress = 0;
        const now = new Date();

        if (idea.ActualCompletion) {
            progress = 100; // Completed
        } else if (idea.Status) {
            const status = idea.Status.toLowerCase();
            if (status.includes('new')) progress = 10;
            else if (status.includes('prioriti')) progress = 25;
            else if (status.includes('scop')) progress = 40;
            else if (status.includes('progress')) progress = 60;
            else if (status.includes('operation')) progress = 85;
            else if (status.includes('complet')) progress = 100;
        }

        // Format duration text
        let durationText;
        if (hasDefiniteEnd) {
            const durationDays = Math.ceil((endDate - startDate) / (24 * 60 * 60 * 1000));
            durationText = durationDays > 30 ?
                `${Math.round(durationDays / 30)} months` :
                `${durationDays} days`;
        } else {
            durationText = 'Ongoing';
        }

        // Format end date text
        const endDateText = hasDefiniteEnd ? endDate.toLocaleDateString('en-AU') : 'No end date set';

        return {
            left: startOffset,
            width: width,
            progress: progress,
            startDate: startDate.toLocaleDateString('en-AU'),
            endDate: endDateText,
            durationText: durationText,
            hasDefiniteEnd: hasDefiniteEnd
        };
    }

    // Render recent ideas
    function renderRecentIdeas() {
        const container = document.getElementById('recentIdeasContainer');

        if (dashboardData.recentIdeas.length === 0) {
            container.innerHTML = '<div class="loading">No recent ideas found</div>';
            return;
        }

        container.innerHTML = '';

        dashboardData.recentIdeas.forEach(idea => {
            const taskItem = document.createElement('div');
            taskItem.className = 'task-item';
            taskItem.onclick = () => window.location.href = '/index'; // Navigate to full board

            const isTop5 = idea.Top5 || idea.isTop5;

            taskItem.innerHTML = `
				<div class="task-title">${idea.Title}</div>
				<div class="task-Idea">${idea.Description || 'No description'}</div>
				${isTop5 ? '<div class="task-priority priority-high">Top Priority</div>' : ''}
			`;

            container.appendChild(taskItem);
        });
    }

    // Load sample data as fallback
    function loadSampleDashboardData() {
        console.log('⚠️ Loading sample dashboard data');

        allData = [
            {
                ID: 851,
                Title: "Control System Enhancement",
                Description: "Implement enhanced control system for better process management",
                Status: "New",
                Domain: "ICT",
                SubmittedBy: "Raneeta Beric",
                Top5: false,
                DateSubmitted: "2024-01-15T10:00:00.000Z"
            },
            {
                ID: 852,
                Title: "Unikey Functionality Improvement",
                Description: "Test and improve unikey functionality for better user experience",
                Status: "In Progress",
                Domain: "ICT",
                SubmittedBy: "Philip Le",
                Top5: true,
                DateSubmitted: "2024-01-15T10:00:00.000Z"
            },
            {
                ID: 743,
                Title: "HR Magical Templating Tool",
                Description: "Utilising the Magical text expander/autofill tool to create templated responses",
                Status: "In Progress",
                Domain: "SSC",
                SubmittedBy: "Michael Herd",
                Top5: true,
                DateSubmitted: "2024-03-31T13:00:00.000Z"
            },
            {
                ID: 744,
                Title: "New Unikey Form Delegation Workflow",
                Description: "Addition of an extra task to RBA creations allowing delegate access",
                Status: "Completed",
                Domain: "Consulting",
                SubmittedBy: "Vikash Rao",
                Top5: false,
                ActualCompletion: "2024-06-10T14:00:00.000Z"
            }
        ];

        allData.forEach(item => {
            item.isComplete = item.Status && item.Status.toLowerCase().includes('complet');
            item.isInProgress = item.Status && item.Status.toLowerCase().includes('progress');
            item.isTop5 = item.Top5;
        });

        processDashboardData();
        renderDashboard();
        document.getElementById('totalCount').textContent = `${dashboardData.totalIdeas} ideas (sample data)`;
    }

    // Event handlers
    document.addEventListener('DOMContentLoaded', function() {
        console.log('🚀 Dashboard Starting...');

        // Initialize components
        new SidebarManager();
        new JourneyStepper();

        // Load data
        loadDashboardData();

        // Event listeners
        document.querySelector('.create-Idea-btn').addEventListener('click', function() {
            alert('Opening Idea creation form');
        });

        document.querySelectorAll('.overview-item').forEach(item => {
            item.addEventListener('click', function() {
                const label = this.querySelector('.overview-label').textContent;
                if (label === 'Ideas') {
                    window.location.href = '/index';
                } else {
                    alert(`Navigating to ${label} section`);
                }
            });
        });

        document.getElementById('refreshBtn').addEventListener('click', () => {
            console.log('🔄 Manual refresh requested');
            document.getElementById('totalCount').textContent = 'Refreshing...';
            loadDashboardData();
        });

        document.getElementById('debugBtn').addEventListener('click', () => {
            console.log('📊 Dashboard Debug Info:');
            console.log('Total Data:', allData.length);
            console.log('Dashboard Metrics:', dashboardData);
            console.log('Sample Data:', allData.slice(0, 3));
        });
    });
</script>
</body>
</html>